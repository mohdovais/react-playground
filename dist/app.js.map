{"version":3,"file":"app.js","sources":["../src/option-country.tsx","../src/Application.tsx","../src/app.tsx"],"sourcesContent":["import * as React from 'react';\nimport { memo } from '../packages/utils/react';\nimport { Country } from './Application';\nimport {\n    wrapper as $wrapper,\n    flag as $flag,\n    details as $details,\n    capital as $capital\n} from './option-country.module.css';\n\ntype CountryOptionProps = {\n    country: Country;\n};\n\nexport function CountryOption({ country }: CountryOptionProps) {\n    return (\n        <div className={$wrapper}>\n            <img src={country.flag} className={$flag} />\n            <div className={$details}>\n                <div>{country.name}</div>\n                <div className={$capital}>{country.capital}</div>\n            </div>\n        </div>\n    );\n}\n\nexport default memo(CountryOption);\n","import * as React from 'react';\nimport { useState, useEffect, useCallback } from '../packages/utils/react';\nimport Combobox from '../packages/combobox';\nimport OptionCountry from './option-country';\n\ntype Language = {\n    code: string;\n    name: string;\n};\n\ntype Currency = {\n    code: string;\n    name: string;\n    symbol: string;\n};\n\nexport type Country = {\n    name: string;\n    code: string;\n    capital: string;\n    region: string;\n    currency: Currency;\n    language: Language;\n    flag: string;\n};\n\nexport function Application() {\n    const [countries, setCountries] = useState<Country[]>([]);\n    const [remoteData, setRemoteData] = useState([]);\n\n    useEffect(() => {\n        fetch('data/countries.json')\n            .then((response) => response.json())\n            .then(setCountries);\n    }, []);\n\n    const remoteQuery = useCallback(\n        function (query: string) {\n            query = query.trim();\n            if (query === '') return [];\n            return new Promise<Country[]>(function (resolve, reject) {\n                const re = new RegExp(query, 'i');\n                const result = countries.filter((country) => {\n                    return re.test(country.name) || re.test(country.capital);\n                });\n                resolve(result);\n            });\n        },\n        [countries]\n    );\n\n    const optionRenderer = useCallback(function (country: Country) {\n        return <OptionCountry country={country} />;\n    }, []);\n\n    return (\n        <div>\n            <h5>Normal</h5>\n            <Combobox data={countries} displayField=\"name\" />\n            <h5>Read Only</h5>\n            <Combobox readOnly data={countries} displayField=\"name\" />\n            <h5>Disabled</h5>\n            <Combobox disabled data={countries} displayField=\"name\" />\n            <h5>Search</h5>\n            <Combobox\n                displayField=\"name\"\n                queryMode=\"remote\"\n                onRemoteQuery={remoteQuery}\n                optionRenderer={optionRenderer}\n                hideTrigger\n            />\n        </div>\n    );\n}\n","import * as ReactDOM from 'react-dom';\nimport React from 'react';\nimport { Application } from './Application';\n\nfunction render(container: HTMLDivElement) {\n    ReactDOM.render(<Application />, container);\n}\n\nfunction unmount(container: HTMLDivElement) {\n    ReactDOM.unmountComponentAtNode(container);\n}\n\nexport default {\n    render,\n    unmount,\n};\n"],"names":["$wrapper","$flag","$details","$capital","Application2"],"mappings":";;;;;;;;uBAc8B,CAAE;AAC5B,6CACK,OAAD;AAAA,IAAK,WAAWA;AAAA,yCACX,OAAD;AAAA,IAAK,KAAK,QAAQ;AAAA,IAAM,WAAWC;AAAA,0CAClC,OAAD;AAAA,IAAK,WAAWC;AAAA,yCACX,OAAD,MAAM,QAAQ,2CACb,OAAD;AAAA,IAAK,WAAWC;AAAA,KAAW,QAAQ;AAAA;AAMnD,oBAAe,KAAK;;;ACChB,QAAM,4BAA4B,SAAoB;AACtD,sCAAoC,SAAS;AAE7C,YAAU;AACN,UAAM,uBACD,KAAK,cAAc,SAAS,QAC5B,KAAK;AAAA,KACX;AAEH,sBAAoB,YAChB;AACI,YAAQ,MAAM;AACd,QAAI,UAAU;AAAI,aAAO;AACzB,WAAO,IAAI,QAAmB;AAC1B,iBAAW,IAAI,OAAO,OAAO;AAC7B,qBAAe,UAAU,OAAO;AAC5B,eAAO,GAAG,KAAK,QAAQ,SAAS,GAAG,KAAK,QAAQ;AAAA;AAEpD,cAAQ;AAAA;AAAA,KAGhB,CAAC;AAGL,yBAAuB,YAAY;AAC/B,+CAAQ,eAAD;AAAA,MAAe;AAAA;AAAA,KACvB;AAEH,6CACK,OAAD,0CACK,MAAD,MAAI,+CACH,UAAD;AAAA,IAAU,MAAM;AAAA,IAAW,cAAa;AAAA,0CACvC,MAAD,MAAI,kDACH,UAAD;AAAA,IAAU,UAAQ;AAAA,IAAC,MAAM;AAAA,IAAW,cAAa;AAAA,0CAChD,MAAD,MAAI,iDACH,UAAD;AAAA,IAAU,UAAQ;AAAA,IAAC,MAAM;AAAA,IAAW,cAAa;AAAA,0CAChD,MAAD,MAAI,+CACH,UAAD;AAAA,IACI,cAAa;AAAA,IACb,WAAU;AAAA,IACV,eAAe;AAAA,IACf;AAAA,IACA,aAAW;AAAA;AAAA;;ACjE3B,gBAAgB;AACZ,sDAAiBC,aAAD,OAAiB;AAAA;AAGrC;AACI,kCAAgC;AAAA;AAGpC,UAAe;AAAA,EACX;AAAA,EACA;AAAA;;;;"}