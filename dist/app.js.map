{"version":3,"file":"app.js","sources":["../src/Application.tsx","../src/app.tsx"],"sourcesContent":["import * as React from 'react';\nimport { useState, useEffect, useCallback } from '../packages/utils/react';\nimport Combobox, { Option, OptGroup } from '../packages/comobobox';\nimport {\n    combobox as $combobox,\n    optgroup as $optgroup,\n    option as $option,\n} from './Application.module.css';\n\ntype Language = {\n    code: string;\n    name: string;\n};\n\ntype Currency = {\n    code: string;\n    name: string;\n    symbol: string;\n};\n\nexport type Country = {\n    name: string;\n    code: string;\n    capital: string;\n    region: string;\n    currency: Currency;\n    language: Language;\n    flag: string;\n};\n\nexport function Application() {\n    const [countries, setCountries] = useState<Country[]>([]);\n\n    useEffect(() => {\n        fetch('data/countries.json')\n            .then((response) => response.json())\n            .then(setCountries);\n    }, []);\n\n    const remoteQuery = useCallback(\n        function (query: string) {\n            query = query.trim();\n            if (query === '') return [];\n            return new Promise<Country[]>(function (resolve, reject) {\n                const re = new RegExp(query, 'i');\n                const result = countries.filter((country) => {\n                    return re.test(country.name) || re.test(country.capital);\n                });\n                resolve(result);\n            });\n        },\n        [countries]\n    );\n\n    const regions = countries.reduce(function (accum, country) {\n        const region = country.region;\n        if (!accum[region]) {\n            accum[region] = [];\n        }\n        accum[region].push(country);\n        return accum;\n    }, {});\n\n    return (\n        <div>\n            <Combobox onChange={console.log} className={$combobox}>\n                {Object.keys(regions).map((region) => (\n                    <OptGroup\n                        key={region}\n                        label={region}\n                        disabled={region === 'EU'}\n                        className={$optgroup}>\n                        {regions[region].map((country) => (\n                            <Option\n                                key={country.code}\n                                value={country.code}\n                                selected={\n                                    country.name === 'India' ||\n                                    country.name === 'Pakistan'\n                                }\n                                className={$option}>\n                                {country.name}\n                            </Option>\n                        ))}\n                    </OptGroup>\n                ))}\n            </Combobox>\n            -<Combobox onChange={console.log} className={$combobox}></Combobox>-\n            <Combobox onChange={console.log} className={$combobox}>\n                <Option value=\"IN\">India</Option>\n            </Combobox>\n            -\n            <Combobox onChange={console.log} className={$combobox}>\n                <Option value=\"IN\">\n                    In<span>d</span>ia\n                </Option>\n            </Combobox>\n        </div>\n    );\n}\n","import * as ReactDOM from 'react-dom';\nimport React from 'react';\nimport { Application } from './Application';\n\nfunction render(container: HTMLDivElement) {\n    ReactDOM.render(<Application />, container);\n}\n\nfunction unmount(container: HTMLDivElement) {\n    ReactDOM.unmountComponentAtNode(container);\n}\n\nexport default {\n    render,\n    unmount,\n};\n"],"names":["$combobox","$optgroup","$option","Application2"],"mappings":";;;;;;;;AA+BI,QAAM,4BAA4B,SAAoB;AAEtD,YAAU;AACN,UAAM,uBACD,KAAK,cAAc,SAAS,QAC5B,KAAK;AAAA,KACX;AAEH,sBAAoB,YAChB;AACI,YAAQ,MAAM;AACd,QAAI,UAAU;AAAI,aAAO;AACzB,WAAO,IAAI,QAAmB;AAC1B,iBAAW,IAAI,OAAO,OAAO;AAC7B,qBAAe,UAAU,OAAO;AAC5B,eAAO,GAAG,KAAK,QAAQ,SAAS,GAAG,KAAK,QAAQ;AAAA;AAEpD,cAAQ;AAAA;AAAA,KAGhB,CAAC;AAGL,kBAAgB,UAAU,OAAO;AAC7B,mBAAe,QAAQ;AACvB,QAAI,CAAC,MAAM;AACP,YAAM,UAAU;AAAA;AAEpB,UAAM,QAAQ,KAAK;AACnB,WAAO;AAAA,KACR;AAEH,6CACK,OAAD,0CACK,UAAD;AAAA,IAAU,UAAU,QAAQ;AAAA,IAAK,WAAWA;AAAA,KACvC,OAAO,KAAK,SAAS,IAAI,gDACrB,UAAD;AAAA,IACI,KAAK;AAAA,IACL,OAAO;AAAA,IACP,UAAU,WAAW;AAAA,IACrB,WAAWC;AAAA,KACV,QAAQ,QAAQ,IAAI,iDAChB,QAAD;AAAA,IACI,KAAK,QAAQ;AAAA,IACb,OAAO,QAAQ;AAAA,IACf,UACI,QAAQ,SAAS,WACjB,QAAQ,SAAS;AAAA,IAErB,WAAWC;AAAA,KACV,QAAQ,WAKlB,yCACT,UAAD;AAAA,IAAU,UAAU,QAAQ;AAAA,IAAK,WAAWF;AAAA,MAAsB,yCAClE,UAAD;AAAA,IAAU,UAAU,QAAQ;AAAA,IAAK,WAAWA;AAAA,yCACvC,QAAD;AAAA,IAAQ,OAAM;AAAA,KAAK,WACZ,yCAEV,UAAD;AAAA,IAAU,UAAU,QAAQ;AAAA,IAAK,WAAWA;AAAA,yCACvC,QAAD;AAAA,IAAQ,OAAM;AAAA,KAAK,0CACZ,QAAD,MAAM,MAAQ;AAAA;;AC1FpC,gBAAgB;AACZ,sDAAiBG,aAAD,OAAiB;AAAA;AAGrC;AACI,kCAAgC;AAAA;AAGpC,UAAe;AAAA,EACX;AAAA,EACA;AAAA;;;;"}