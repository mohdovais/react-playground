{"version":3,"file":"app.js","sources":["../src/Application.tsx","../src/app.tsx"],"sourcesContent":["import * as React from 'react';\nimport { useState, useEffect, useCallback } from '../packages/utils/react';\nimport Combobox from '../packages/combobox';\nimport OptionCountry from './option-country';\nimport SimpleCombobox, { Option } from '../packages/comobobox-simple';\nimport { OptGroup } from '../packages/comobobox-simple/combobox';\n\ntype Language = {\n    code: string;\n    name: string;\n};\n\ntype Currency = {\n    code: string;\n    name: string;\n    symbol: string;\n};\n\nexport type Country = {\n    name: string;\n    code: string;\n    capital: string;\n    region: string;\n    currency: Currency;\n    language: Language;\n    flag: string;\n};\n\nexport function Application() {\n    const [countries, setCountries] = useState<Country[]>([]);\n\n    useEffect(() => {\n        fetch('data/countries.json')\n            .then((response) => response.json())\n            .then(setCountries);\n    }, []);\n\n    const remoteQuery = useCallback(\n        function (query: string) {\n            query = query.trim();\n            if (query === '') return [];\n            return new Promise<Country[]>(function (resolve, reject) {\n                const re = new RegExp(query, 'i');\n                const result = countries.filter((country) => {\n                    return re.test(country.name) || re.test(country.capital);\n                });\n                resolve(result);\n            });\n        },\n        [countries]\n    );\n\n    const regions = countries.reduce(function (accum, country) {\n        const region = country.region;\n        if (!accum[region]) {\n            accum[region] = [];\n        }\n        accum[region].push(country);\n        return accum;\n    }, {});\n\n    return (\n        <div>\n            <SimpleCombobox onChange={console.log}>\n                {Object.keys(regions).map((region) => (\n                    <OptGroup key={region} label={region}>\n                        {regions[region].map((country) => (\n                            <Option key={country.code}>{country.name}</Option>\n                        ))}\n                    </OptGroup>\n                ))}\n            </SimpleCombobox>\n        </div>\n    );\n}\n","import * as ReactDOM from 'react-dom';\nimport React from 'react';\nimport { Application } from './Application';\n\nfunction render(container: HTMLDivElement) {\n    ReactDOM.render(<Application />, container);\n}\n\nfunction unmount(container: HTMLDivElement) {\n    ReactDOM.unmountComponentAtNode(container);\n}\n\nexport default {\n    render,\n    unmount,\n};\n"],"names":["useState","then","response","json","setCountries","useCallback","query","trim","Promise","RegExp","countries","filter","re","test","country","name","capital","reduce","region","accum","push","SimpleCombobox","onChange","console","log","Object","keys","regions","map","OptGroup","key","label","Option","code","render","container","Application2","unmount"],"mappings":"uJA6BsCA,EAAoB,OAE5C,WACA,uBACDC,SAAmBC,EAASC,SAC5BF,KAAKG,KACX,IAEiBC,GAChB,kBAEkB,QADNC,EAAMC,QACW,GAClB,IAAIC,SAAmB,sBACf,IAAIC,OAAOH,EAAO,OACdI,EAAUC,WACdC,EAAGC,KAAKC,EAAQC,OAASH,EAAGC,KAAKC,EAAQE,iBAK5D,CAACN,YAGWA,EAAUO,QAAO,sBACdH,EAAQI,cAClBC,EAAMD,OACDA,GAAU,MAEdA,GAAQE,KAAKN,GACZK,IACR,2BAGE,MAAD,qBACKE,EAAD,CAAgBC,SAAUC,QAAQC,KAC7BC,OAAOC,KAAKC,GAASC,wBACjBC,EAAD,CAAUC,IAAKZ,EAAQa,MAAOb,GACzBS,EAAQT,GAAQU,wBACZI,EAAD,CAAQF,IAAKhB,EAAQmB,MAAOnB,EAAQC,aCvDhE,MAAe,CACXmB,OATJ,SAAgBC,4BACKC,EAAD,MAAiBD,IASjCE,QANJ,qCACoCF"}