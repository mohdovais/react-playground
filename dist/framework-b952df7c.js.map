{"version":3,"file":"framework-b952df7c.js","sources":["../packages/utils/react.ts","../packages/utils/array.ts","../packages/combobox/listbox-items.tsx","../packages/combobox/constant.ts","../packages/combobox/listbox.tsx","../packages/utils/dom.ts","../packages/combobox/use-position.ts","../packages/utils/object.ts","../packages/combobox/combobox.store.ts","../packages/utils/common.ts","../packages/combobox/combobox.tsx","../packages/combobox/use-actions.ts","../packages/utils/function.ts"],"sourcesContent":["import * as React from 'react';\n\nexport default React;\nexport const memo = React.memo;\nexport const useCallback = React.useCallback;\nexport const useState = React.useState;\nexport const useRef = React.useRef;\nexport const useReducer = React.useReducer;\nexport const useEffect = React.useEffect;\nexport const forwardRef = React.forwardRef;\nexport const useMemo = React.useMemo;\nexport const Fragment = React.Fragment;\n","export function ensureArray<T = undefined>(subject?: T | T[] | null) {\n    if (subject == null) return [];\n    if (Array.isArray(subject)) return subject;\n    return [subject];\n}\n","/// <reference path=\"combobox.d.ts\" />\nimport React, { memo, useEffect, useReducer } from '../utils/react';\nimport { ensureArray } from '../utils/array';\nimport {\n    option as $option,\n    focus as $focus,\n    selected as $selected,\n    _default as $default,\n} from './listbox.module.css';\nimport {\n    Json,\n    ListBoxItemContentProps,\n    ListBoxItemProps,\n    ListBoxProps,\n} from 'Combobox';\nimport { emptyFn } from '../utils/function';\nimport { KEY_ARROW_DOWN, KEY_ARROW_UP, KEY_ENTER } from './constant';\n\nfunction scrollIntoView(el: HTMLElement | null, smooth = true) {\n    if (el == null) return;\n    setTimeout(\n        () =>\n            el.scrollIntoView({\n                behavior: smooth ? 'smooth' : 'auto',\n                block: 'nearest',\n            }),\n        100\n    );\n}\n\nexport const listBoxItemContentFactory = (displayField: string) =>\n    memo(function ListBoxItem<T extends Json>(\n        props: ListBoxItemContentProps<T>\n    ) {\n        return <div className={$default}>{props.record[displayField]}</div>;\n    });\n\nconst ListBoxItem = memo(function ListBoxItem<T>(props: ListBoxItemProps<T>) {\n    const { id, onClick, className, record, children } = props;\n    return (\n        <li\n            role=\"option\"\n            id={id}\n            className={$option + ' ' + className}\n            onClick={() => onClick(record)}>\n            {children}\n        </li>\n    );\n});\n\nexport function ListBoxItems(props: ListBoxProps<Json>) {\n    const {\n        id,\n        data,\n        keyboard,\n        itemRenderer,\n        onSelect,\n        onKeyFocus = emptyFn,\n    } = props;\n    const selection = ensureArray(props.selection);\n\n    const totalItems = data.length;\n    const idPrefx = id + '-option-';\n    const firstSelectedIndex = data.indexOf(selection[0]);\n    const firstSelectedId =\n        firstSelectedIndex === -1 ? '' : idPrefx + firstSelectedIndex;\n    const key = keyboard ? keyboard.key : '';\n\n    const OptionRenderer = itemRenderer;\n\n    const [focusIndex, disptachKeyboard] = useReducer(function (\n        index: number,\n        action: string\n    ) {\n        let _index = index;\n        switch (action) {\n            case KEY_ARROW_UP:\n                _index = index === -1 ? totalItems - 1 : index - 1;\n                break;\n            case KEY_ARROW_DOWN:\n                _index = index === -1 ? 0 : index + 1;\n        }\n        return _index === index\n            ? index\n            : totalItems === 0\n            ? -1\n            : (totalItems + _index) % totalItems;\n    },\n    firstSelectedIndex);\n\n    if (key === KEY_ENTER && focusIndex !== -1) {\n        onSelect(data[focusIndex]);\n    }\n\n    useEffect(() => {\n        if (key && key !== KEY_ENTER) {\n            disptachKeyboard(key);\n        }\n    }, [keyboard, key]);\n\n    useEffect(() => {\n        if (firstSelectedId !== '') {\n            scrollIntoView(document.getElementById(firstSelectedId), false);\n        }\n    }, [firstSelectedIndex]);\n\n    useEffect(() => {\n        if (focusIndex !== -1) {\n            onKeyFocus(idPrefx + focusIndex);\n            scrollIntoView(\n                document.getElementById(idPrefx + focusIndex),\n                false\n            );\n        }\n    }, [focusIndex]);\n\n    return (\n        <ul>\n            {data.map((item, index) => {\n                const liId = idPrefx + index;\n                const isSelected = selection.indexOf(item) !== -1;\n                const liClassName =\n                    (focusIndex === index ? 'focus ' + $focus : '') +\n                    (isSelected ? ' selected ' + $selected : '');\n\n                return (\n                    <ListBoxItem\n                        key={liId}\n                        id={liId}\n                        className={liClassName}\n                        record={item}\n                        selected={isSelected}\n                        onClick={onSelect}>\n                        <OptionRenderer record={item} selected={isSelected} />\n                    </ListBoxItem>\n                );\n            })}\n        </ul>\n    );\n}\n","export const KEY_ARROW_DOWN = 'ArrowDown';\nexport const KEY_ARROW_UP = 'ArrowUp';\nexport const KEY_ENTER = 'Enter';\n\nexport const EVENT_RESIZE = 'resize';\nexport const EVENT_SCROLL = 'scroll';\n","/// <reference path=\"combobox.d.ts\" />\nimport React, { memo, useCallback } from '../utils/react';\nimport { ensureArray } from '../utils/array';\nimport {\n    listbox as $listbox,\n    _default as $default,\n} from './listbox.module.css';\nimport { ListBoxItems } from './listbox-items';\nimport { ListBoxProps, ListBoxItemContentProps, Json } from 'Combobox';\n\nfunction ListBox(props: ListBoxProps<Json>) {\n    const {\n        id,\n        className = '',\n        style,\n        expanded,\n        data,\n        keyboard,\n        itemRenderer,\n        onSelect,\n        selection,\n        onKeyFocus\n    } = props;\n\n    const handleSelect = useCallback((item) => onSelect(item), [onSelect]);\n\n    return (\n        <div\n            id={id}\n            role=\"listbox\"\n            className={$listbox + ' ' + className}\n            style={style}\n            tabIndex={-1}>\n            {expanded === true ? (\n                <ListBoxItems\n                    id={id}\n                    data={ensureArray(data)}\n                    keyboard={keyboard}\n                    itemRenderer={itemRenderer}\n                    onSelect={handleSelect}\n                    onKeyFocus={onKeyFocus}\n                    selection={selection}\n                />\n            ) : null}\n        </div>\n    );\n}\n\nexport const listBoxItemContentFactory = (displayField: string) =>\n    memo(function ListBoxItem<T extends Json>(\n        props: ListBoxItemContentProps<T>\n    ) {\n        return <div className={$default}>{props.record[displayField]}</div>;\n    });\n\nexport default memo(ListBox);\n","export const win = window;\nexport const addEventListener = win.addEventListener;\nexport const removeEventListener = win.removeEventListener;","import React, { useState, useEffect } from '../utils/react';\nimport { win, addEventListener, removeEventListener } from '../utils/dom';\nimport { EVENT_RESIZE, EVENT_SCROLL } from './constant';\n\nconst none = {};\n\nfunction getPosition(el: HTMLDivElement | null): React.CSSProperties {\n    if (el == null) {\n        return none;\n    }\n    const viewportHeight = win.innerHeight;\n    const { top, bottom, height } = el.getBoundingClientRect();\n\n    if (top < 0 || top > viewportHeight) {\n        return none;\n    }\n\n    const bottomSpace = viewportHeight - bottom;\n\n    if (top < bottomSpace) {\n        return {\n            top: height,\n            maxHeight: viewportHeight - bottom - 5,\n        };\n    }\n\n    return {\n        bottom: height,\n        maxHeight: top - 5,\n    };\n}\n\nexport function usePickerPosition(\n    ref: React.RefObject<HTMLDivElement>,\n    calculate: boolean\n) {\n    const current = ref.current;\n    const [postion, setPosition] = useState(() => getPosition(current));\n\n    useEffect(() => {\n        let busy = false;\n        function doCalculate() {\n            if (calculate && !busy) {\n                busy = true;\n                win.requestAnimationFrame(() => {\n                    setPosition(getPosition(current));\n                    busy = false;\n                });\n            }\n        }\n        addEventListener(EVENT_RESIZE, doCalculate);\n        addEventListener(EVENT_SCROLL, doCalculate);\n\n        if (calculate) {\n            doCalculate();\n        } else {\n            setPosition(none);\n        }\n\n        return () => {\n            removeEventListener(EVENT_RESIZE, doCalculate);\n            removeEventListener(EVENT_SCROLL, doCalculate);\n        };\n    }, [calculate, current]);\n\n    return postion;\n}\n","const O = Object;\nexport const assign = O.assign;\n\nexport function extend<T, S>(a: T, b: S): {} & T & S {\n    return assign({}, a, b);\n}\n\nexport function hasOwnProperty(object: any, property: string): boolean {\n    return O.prototype.hasOwnProperty.call(object, property);\n}\n","/// <reference path=\"combobox.d.ts\" />\nimport { extend } from '../utils/object';\nimport { Json, KeyboardNavType } from 'Combobox';\nimport { ComboboxState, ComboboxAction } from 'Combobox';\n\nexport const ACTION_TYPE_COLLAPSE = 0;\nexport const ACTION_TYPE_EXPAND = 1;\nexport const ACTION_TYPE_TOGGLE = 2;\nexport const ACTION_TYPE_KEYBOARD_NAVIGATION = 3;\nexport const ACTION_TYPE_SELECT = 4;\nexport const ACTION_TYPE_SET_DATA = 5;\nexport const ACTION_TYPE_LOCAL_SEARCH = 6;\nexport const ACTION_TYPE_SET_WAITING = 7;\nexport const ACTION_TYPE_SET_ACTIVE_DECENDENT = 8;\n\nexport const initialState = {\n    id: '',\n    expanded: false,\n    waiting: false,\n    selection: [],\n    data: [],\n    range: [],\n    keyboard: {\n        key: '',\n        count: 0,\n    },\n    activeDescendant: '',\n};\n\nfunction keyboardNavigation(nav: KeyboardNavType, key: string) {\n    return {\n        key,\n        count: nav.key === key ? nav.count + 1 : 0,\n    };\n}\n\nexport function comboboxReducer<T extends Json>(\n    state: ComboboxState<T>,\n    action: ComboboxAction<T>\n): ComboboxState<T> {\n    switch (action.type) {\n        case ACTION_TYPE_COLLAPSE:\n            return extend(state, {\n                expanded: false,\n                activeDescendant: '',\n            });\n\n        case ACTION_TYPE_EXPAND:\n            return extend(state, {\n                expanded: true,\n            });\n\n        case ACTION_TYPE_TOGGLE:\n            return comboboxReducer(state, {\n                type: state.expanded\n                    ? ACTION_TYPE_COLLAPSE\n                    : ACTION_TYPE_EXPAND,\n            });\n\n        case ACTION_TYPE_KEYBOARD_NAVIGATION:\n            return extend(state, {\n                expanded: true,\n                keyboard: keyboardNavigation(state.keyboard, action.key),\n            });\n\n        case ACTION_TYPE_SELECT:\n            return extend(state, {\n                expanded: false,\n                activeDescendant: '',\n                range: state.data,\n                selection: action.selection,\n            });\n\n        case ACTION_TYPE_LOCAL_SEARCH: {\n            const search = new RegExp(action.query, 'i');\n            return extend(state, {\n                expanded: true,\n                range: state.data.filter((record) =>\n                    search.test(record.toString())\n                ),\n            });\n        }\n\n        case ACTION_TYPE_SET_DATA:\n            return extend(state, {\n                expanded: action.expand,\n                waiting: false,\n                data: action.data,\n                range: action.data,\n            });\n\n        case ACTION_TYPE_SET_WAITING:\n            return extend(state, {\n                waiting: action.waiting,\n            });\n\n        case ACTION_TYPE_SET_ACTIVE_DECENDENT:\n            return extend(state, {\n                activeDescendant: action.id,\n            });\n    }\n\n    return state;\n}\n","const { round, random } = Math;\n\nexport function randomId(prefix = '') {\n    return prefix + round(random() + random() * 10e16).toString(32);\n}\n","/// <reference path=\"combobox.d.ts\" />\nimport React, {\n    useCallback,\n    useRef,\n    useReducer,\n    useEffect,\n    useMemo,\n    memo,\n} from '../utils/react';\nimport ListBox, { listBoxItemContentFactory } from './listbox';\nimport { usePickerPosition } from './use-position';\nimport { comboboxReducer, initialState } from './combobox.store';\nimport { useComboboxActions } from './use-actions';\nimport { randomId } from '../utils/common';\nimport { debounced, emptyFn } from '../utils/function';\nimport {\n    combobox as $combobox,\n    input_wrapper as $input_wrapper,\n    input as $input,\n    trigger as $trigger,\n    picker as $picker,\n    waiting as $waiting,\n} from './combobox.module.scss';\nimport { extend } from '../utils/object';\nimport { ComboboxProps, Json } from 'Combobox';\n\nfunction focus(ref: React.RefObject<HTMLElement>) {\n    let el = ref.current;\n    if (el) {\n        el.focus();\n    }\n}\n\nfunction Combobox(props: ComboboxProps<Json>) {\n    const comboboxRef = useRef<HTMLDivElement>(null);\n    const inputRef = useRef<HTMLInputElement>(null);\n\n    const {\n        queryMode = 'local',\n        displayField = 'text',\n        className = '',\n        forceSelection = true,\n        data,\n        hideTrigger,\n        disabled,\n        readOnly,\n        placeholder,\n        onChange = emptyFn,\n        onRemoteQuery = emptyFn,\n        optionRenderer,\n        displayRenderer,\n    } = props;\n\n    const optionRendererMemo = useMemo(() => {\n        return optionRenderer == null\n            ? listBoxItemContentFactory(displayField)\n            : optionRenderer;\n    }, [displayField, optionRenderer]);\n\n    const [state, dispatch] = useReducer(\n        comboboxReducer,\n        initialState,\n        (state) => extend(state, { id: randomId('combobox-'), displayField })\n    );\n\n    const {\n        toggle,\n        select,\n        handleKeys,\n        handleLocalSearch,\n        setData,\n        setWaiting,\n        setActiveDecendent,\n    } = useComboboxActions(dispatch);\n\n    const {\n        id,\n        expanded,\n        selection,\n        range,\n        waiting,\n        keyboard,\n        activeDescendant,\n    } = state;\n\n    const pickerStyle = usePickerPosition(comboboxRef, expanded);\n    const pickerId = id + '-picker';\n\n    const handleTriggerClick = useCallback(() => {\n        focus(inputRef);\n        toggle();\n    }, [inputRef]);\n\n    const handleInput = useCallback(\n        debounced((event: React.FormEvent<HTMLInputElement>) => {\n            const input = event.target as HTMLInputElement;\n            const text = input.value;\n            if (queryMode === 'local') {\n                handleLocalSearch(text);\n            } else {\n                setWaiting(true);\n                Promise.resolve(onRemoteQuery(text)).then((data) => {\n                    data && setData(data, true);\n                });\n            }\n        }),\n        [queryMode, onRemoteQuery, setWaiting, handleLocalSearch]\n    );\n\n    useEffect(() => {\n        if (data !== undefined) {\n            setData(data);\n        }\n    }, [data]);\n\n    useEffect(() => {\n        onChange(selection);\n    }, [selection, onChange]);\n\n    const cls =\n        $combobox + ' ' + className + (waiting ? ' wating ' + $waiting : '');\n\n    return (\n        <div className={cls} ref={comboboxRef}>\n            <div\n                className={$input_wrapper}\n                role=\"combobox\"\n                aria-expanded={expanded ? 'true' : 'false'}\n                aria-owns={pickerId}\n                aria-haspopup=\"listbox\">\n                <input\n                    type=\"text\"\n                    aria-autocomplete=\"both\"\n                    aria-controls={pickerId}\n                    aria-activedescendant={activeDescendant}\n                    onKeyDown={handleKeys}\n                    onInput={handleInput}\n                    className={$input}\n                    ref={inputRef}\n                    disabled={disabled}\n                    readOnly={readOnly}\n                    placeholder={placeholder}\n                />\n                {hideTrigger ? null : (\n                    <div\n                        className={$trigger}\n                        tabIndex={-1}\n                        role=\"button\"\n                        aria-label=\"Show options\"\n                        onClick={disabled ? undefined : handleTriggerClick}>\n                        ▼\n                    </div>\n                )}\n            </div>\n            <ListBox\n                id={pickerId}\n                data={range}\n                itemRenderer={optionRendererMemo}\n                expanded={expanded}\n                onSelect={select}\n                selection={selection}\n                className={$picker}\n                style={pickerStyle}\n                keyboard={keyboard}\n                onKeyFocus={setActiveDecendent}\n            />\n        </div>\n    );\n}\n\nexport default memo(Combobox);\n","/// <reference path=\"combobox.d.ts\" />\nimport { useCallback } from '../utils/react';\nimport {\n    ACTION_TYPE_COLLAPSE,\n    ACTION_TYPE_EXPAND,\n    ACTION_TYPE_KEYBOARD_NAVIGATION,\n    ACTION_TYPE_LOCAL_SEARCH,\n    ACTION_TYPE_SELECT,\n    ACTION_TYPE_SET_DATA,\n    ACTION_TYPE_TOGGLE,\n    ACTION_TYPE_SET_WAITING,\n    ACTION_TYPE_SET_ACTIVE_DECENDENT,\n} from './combobox.store';\nimport { KEY_ARROW_DOWN, KEY_ARROW_UP, KEY_ENTER } from './constant';\nimport { ComboboxAction } from 'Combobox';\n\nexport function useComboboxActions<Json>(\n    dispatch: React.Dispatch<ComboboxAction<Json>>\n) {\n    const deps = [dispatch];\n\n    const expand = useCallback(\n        () => dispatch({ type: ACTION_TYPE_EXPAND }),\n        deps\n    );\n\n    const collapse = useCallback(\n        () => dispatch({ type: ACTION_TYPE_COLLAPSE }),\n        deps\n    );\n\n    const toggle = useCallback(\n        () => dispatch({ type: ACTION_TYPE_TOGGLE }),\n        deps\n    );\n\n    const select = useCallback(\n        (selection: Json) => dispatch({ type: ACTION_TYPE_SELECT, selection }),\n        deps\n    );\n\n    const handleLocalSearch = useCallback(\n        (query: string) => dispatch({ type: ACTION_TYPE_LOCAL_SEARCH, query }),\n        deps\n    );\n\n    const setData = useCallback((data: Json[], expand = false) => {\n        dispatch({ type: ACTION_TYPE_SET_DATA, data, expand });\n    }, deps);\n\n    const setWaiting = useCallback(\n        (waiting: boolean) =>\n            dispatch({ type: ACTION_TYPE_SET_WAITING, waiting }),\n        deps\n    );\n\n    const setActiveDecendent = useCallback(\n        (id: string) =>\n            dispatch({ type: ACTION_TYPE_SET_ACTIVE_DECENDENT, id }),\n        deps\n    );\n\n    const handleKeys = useCallback(function (\n        event: React.KeyboardEvent<HTMLInputElement>\n    ) {\n        switch (event.key) {\n            case KEY_ARROW_DOWN:\n            case KEY_ARROW_UP:\n            case KEY_ENTER:\n                dispatch({\n                    type: ACTION_TYPE_KEYBOARD_NAVIGATION,\n                    key: event.key,\n                });\n                break;\n\n            case 'Escape':\n                collapse();\n                break;\n        }\n    },\n    deps);\n\n    return {\n        expand,\n        collapse,\n        toggle,\n        select,\n        handleKeys,\n        handleLocalSearch,\n        setData,\n        setWaiting,\n        setActiveDecendent,\n    };\n}\n","export function emptyFn() {}\n\nexport function debounced(\n    task: Function,\n    duration: number = 250,\n    scope?: Object\n) {\n    let timer: number;\n\n    return function () {\n        function later(arg: any[]) {\n            clearTimeout(timer);\n            task.apply(scope, arg);\n        }\n\n        clearTimeout(timer);\n\n        //Array.from\n        timer = setTimeout(\n            later,\n            duration,\n            Array.prototype.slice.call(arguments)\n        );\n    };\n}\n"],"names":["memo","React.memo","React.useCallback","React.useState","React.useRef","React.useReducer","React.useEffect","React.useMemo","subject","Array","isArray","el","scrollIntoView","behavior","smooth","block","id","onClick","className","record","children","props","role","$option","data","keyboard","itemRenderer","onSelect","onKeyFocus","emptyFn","ensureArray","selection","length","indexOf","firstSelectedIndex","idPrefx","key","useReducer","index","action","totalItems","_index","focusIndex","firstSelectedId","document","getElementById","map","item","ListBoxItem","liId","liClassName","selected","isSelected","OptionRenderer","style","expanded","useCallback","$listbox","tabIndex","ListBoxItems","handleSelect","win","window","addEventListener","removeEventListener","none","innerHeight","top","bottom","height","getBoundingClientRect","viewportHeight","maxHeight","Object","assign","a","b","waiting","range","count","activeDescendant","type","extend","state","comboboxReducer","nav","RegExp","query","filter","search","test","toString","expand","round","random","Math","prefix","useRef","queryMode","displayField","forceSelection","hideTrigger","disabled","readOnly","placeholder","onChange","onRemoteQuery","optionRenderer","displayRenderer","useMemo","listBoxItemContentFactory","initialState","state2","randomId","toggle","select","handleKeys","handleLocalSearch","setData","setWaiting","setActiveDecendent","dispatch","deps","event","collapse","useComboboxActions","ref","current","useState","getPosition","calculate","busy","requestAnimationFrame","doCalculate","postion","usePickerPosition","comboboxRef","focus","inputRef","task","timer","apply","scope","arg","setTimeout","later","duration","prototype","slice","call","arguments","debounced","target","value","text","resolve","then","data2","$combobox","cls","aria-expanded","aria-owns","pickerId","aria-haspopup","aria-autocomplete","aria-controls","aria-activedescendant","onKeyDown","onInput","handleInput","aria-label","handleTriggerClick","ListBox","optionRendererMemo","pickerStyle"],"mappings":"sDAGaA,EAAOC,SACOC,gBACHC,aACFC,WACIC,eACDC,cAEFC,qBCVoBC,UACxB,MAAXA,EAAwB,GACxBC,MAAMC,QAAQF,GAAiBA,EAC5B,CAACA,iBCeZ,WAAwBG,KAAiC,GAC3C,MAANA,eAEA,IACIA,EAAGC,eAAe,CACdC,SAAUC,EAAS,SAAW,OAC9BC,MAAO,aAEf,KAWR,QAAoBf,GAAK,qBACbgB,UAAIC,YAASC,SAAWC,WAAQC,GAAaC,yBAEhD,KAAD,CACIC,KAAK,SACLN,GAAAA,EACAE,UAAWK,WAAgBL,EAC3BD,QAAS,IAAMA,EAAQE,IACtBC,6BAOLJ,OACAQ,WACAC,eACAC,WACAC,aACAC,EAAaC,GACbR,IACcS,EAAYT,EAAMU,aAEjBP,EAAKQ,SACRhB,EAAK,aACMQ,EAAKS,QAAQF,EAAU,WAE9CG,EAA4B,GAAKC,EAAUD,IACnCT,EAAWA,EAASW,IAAM,KAEfV,QAEgBW,GAAW,oBAIjCC,SACLC,OC1EY,iBD4EHD,EAAeE,EAAa,EAAIF,EAAQ,YC7EnC,mBDgFLA,EAAe,EAAIA,EAAQ,SAErCG,IAAWH,EACZA,EACe,IAAfE,QAEcC,GAAUD,IAElCN,SCtFqB,UDwFjBE,QAAqBM,KACZlB,EAAKkB,OAGR,KACFN,GC7Fa,UD6FNA,KACUA,KAEtB,CAACX,EAAUW,OAEJ,KACkB,KAApBO,KACeC,SAASC,eAAeF,IAAkB,KAE9D,CAACT,OAEM,UACFQ,MACWP,EAAUO,KAEjBE,SAASC,eAAeV,EAAUO,IAClC,MAGT,CAACA,oBAGC,KAAD,KACKlB,EAAKsB,KAAI,gBACOX,EAAUG,SACJP,EAAUE,QAAQc,UAEjBT,EAAQ,gBAAoB,OAC9B,oBAA2B,2BAGxCU,EAAD,CACIZ,IAAKa,EACLjC,GAAIiC,EACJ/B,UAAWgC,EACX/B,OAAQ4B,EACRI,SAAUC,EACVnC,QAASU,mBACR0B,EAAD,CAAgBlC,OAAQ4B,EAAMI,SAAUC,SE9EhE,MAAepD,GA7Cf,SAAiBqB,YAETL,YACAE,EAAY,SACZoC,WACAC,OACA/B,WACAC,eACAC,WACAC,YACAI,aACAH,GACAP,IAEiBmC,MAAsB7B,EAASoB,IAAO,CAACpB,2BAGvD,MAAD,CACIX,GAAAA,EACAM,KAAK,UACLJ,UAAWuC,WAAiBvC,EAC5BoC,MAAAA,EACAI,cACc,IAAbH,kBACII,EAAD,CACI3C,GAAAA,EACAQ,KAAMM,EAAYN,GAClBC,SAAAA,EACAC,aAAAA,EACAC,SAAUiC,EACVhC,WAAAA,EACAG,UAAAA,IAEJ,eC3CH8B,EAAMC,SACaD,EAAIE,mBACDF,EAAIG,oBCEjCC,EAAO,GAEb,iBACc,MAANtD,SACOsD,UAEYJ,EAAIK,iBACnBC,SAAKC,SAAQC,GAAW1D,EAAG2D,2BAE/BH,EAAM,GAAKA,EAAMI,SACVN,SAKPE,EAFgBI,EAAiBH,EAG1B,CACHD,IAAKE,EACLG,UAAWD,EAAiBH,EAAS,GAItC,CACHA,OAAQC,EACRG,UAAWL,EAAM,GC5BzB,QAAUM,OACcC,8BAGbA,EAAO,GAAIC,EAAGC,WCWG,CACxB5D,GAAI,GACJuC,UAAU,EACVsB,SAAS,EACT9C,UAAW,GACXP,KAAM,GACNsD,MAAO,GACPrD,SAAU,CACNW,IAAK,GACL2C,MAAO,GAEXC,iBAAkB,2BAcVzC,EAAO0C,WAnCiB,SAqCjBC,EAAOC,EAAO,CACjB5B,UAAU,EACVyB,iBAAkB,UAtCA,SA0CfE,EAAOC,EAAO,CACjB5B,UAAU,SA1CQ,SA8Cf6B,EAAgBD,EAAO,CAC1BF,KAAME,EAAM5B,SAjDQ,EACF,SAEa,SAoD5B2B,EAAOC,EAAO,CACjB5B,UAAU,EACV9B,YAA6B0D,EAAM1D,WAAUc,EAAOH,IAhCzD,CACHA,IAAAA,EACA2C,MAAOM,EAAIjD,MAAQA,EAAMiD,EAAIN,MAAQ,EAAI,WAvBf,SAyDfG,EAAOC,EAAO,CACjB5B,UAAU,EACVyB,iBAAkB,GAClBF,MAAOK,EAAM3D,KACbO,UAAWQ,EAAOR,iBA3DM,WA+Db,IAAIuD,OAAO/C,EAAOgD,MAAO,YACjCL,EAAOC,EAAO,CACjB5B,UAAU,EACVuB,MAAOK,EAAM3D,KAAKgE,WACdC,EAAOC,KAAKvE,EAAOwE,qBApEH,SA0EjBT,EAAOC,EAAO,CACjB5B,SAAUhB,EAAOqD,OACjBf,SAAS,EACTrD,KAAMe,EAAOf,KACbsD,MAAOvC,EAAOf,YA5ES,SAgFpB0D,EAAOC,EAAO,CACjBN,QAAStC,EAAOsC,eAhFgB,SAoF7BK,EAAOC,EAAO,CACjBH,iBAAkBzC,EAAOvB,KArEzC,eAyEWmE,ECtGX,MAAMU,MAAEA,SAAOC,GAAWC,kBAEQ,WACvBC,EAASH,EAAMC,IAAsB,KAAXA,KAAkBH,SAAS,ICuKhE,MAAe3F,GAzIf,oBACwBiG,EAAuB,QAC1BA,EAAyB,iBAGtCC,EAAY,qBACZC,EAAe,iBACfjF,EAAY,kBACZkF,GAAiB,OACjB5E,cACA6E,WACAC,WACAC,cACAC,WACAC,EAAW5E,gBACX6E,EAAgB7E,iBAChB8E,kBACAC,GACAvF,IAEuBwF,GAAQ,IACN,MAAlBF,ENN0B,IACrC3G,GAAK,mCAGO,MAAD,CAAKkB,qBAAsBG,EAAMF,OAAOgF,OMGzCW,CAA0BX,GAC1BQ,GACP,CAACR,EAAcQ,UAEQtE,EACtB+C,EACA2B,MACW7B,EAAO8B,EAAO,CAAEhG,GAAIiG,EAAS,aAAcd,aAAAA,cAItDe,SACAC,aACAC,oBACAC,UACAC,aACAC,qBACAC,YCvDJC,WAEa,CAACA,KAECjE,GACX,IAAMiE,EAAS,CAAExC,KHhBS,KGiB1ByC,KAGalE,GACb,IAAMiE,EAAS,CAAExC,KHtBW,KGuB5ByC,KAGWlE,GACX,IAAMiE,EAAS,CAAExC,KHzBS,KG0B1ByC,KAGWlE,MACUiE,EAAS,CAAExC,KH5BN,EG4BgClD,UAAAA,KAC1D2F,KAGsBlE,MACHiE,EAAS,CAAExC,KH/BE,EG+B8BM,MAAAA,KAC9DmC,KAGYlE,GAAY,MAAwB,OACvC,CAAEyB,KHrCiB,EGqCWzD,KAAAA,EAAMoE,aAC9C8B,KAEgBlE,MAEXiE,EAAS,CAAExC,KHxCgB,EGwCeJ,QAAAA,KAC9C6C,KAGuBlE,MAEnBiE,EAAS,CAAExC,KH7CyB,EG6CejE,GAAAA,KACvD0G,KAGelE,GAAY,mBAGnBmE,EAAMvF,SRjEQ,gBACF,cACH,UQmEA,CACL6C,KH9D2B,EG+D3B7C,IAAKuF,EAAMvF,gBAId,gBAKbsF,SAEO,CACH9B,OAAAA,EACAgC,SAAAA,EACAV,OAAAA,EACAC,OAAAA,EACAC,WAAAA,EACAC,kBAAAA,EACAC,QAAAA,EACAC,WAAAA,EACAC,mBAAAA,GDlBAK,CAAmBJ,OAGnBzG,WACAuC,YACAxB,QACA+C,UACAD,WACApD,mBACAuD,GACAG,0BJ/CY2C,EAAIC,cACWC,GAAS,IAAMC,EAAYF,eAEhD,YACK,eAEHG,IAAcC,OACP,IACHC,uBAAsB,OACVH,EAAYF,OACjB,eH1CC,SG8CWM,KH7CX,SG8CWA,GAE3BH,QAGYjE,GAGT,OHvDa,SGwDkBoE,KHvDlB,SGwDkBA,MAEvC,CAACH,EAAWH,IAERO,EIoBaC,CAAkBC,EAAajF,KAClCvC,EAAK,aAEKwC,GAAY,MA9D3C,SAAesE,SACFA,EAAIC,QACTpH,KACG8H,SA4DGC,SAEP,CAACA,OAEgBlF,WE1FpBmF,IACmB,oBAKZ,sCAEcC,KACRC,MAAMC,EAAOC,gBAGTH,KAGLI,WACJC,EACAC,EACAzI,MAAM0I,UAAUC,MAAMC,KAAKC,aFyE/BC,cACkB5B,EAAM6B,OACDC,MACD,UAAdvD,IACkBwD,OAEP,WACHC,QAAQjD,EAAcgD,IAAOE,aACzBtC,EAAQuC,GAAM,UAIlC,CAAC3D,EAAWQ,EAAea,EAAYF,OAGjC,UACO,IAAT7F,KACQA,KAEb,CAACA,OAEM,OACGO,KACV,CAACA,EAAW0E,aAGXqD,WAAkB5I,KAAuB,kBAAwB,2BAGhE,MAAD,CAAKA,UAAW6I,GAAKjC,IAAKU,mBACrB,MAAD,CACItH,oBACAI,KAAK,WACL0I,gBAAezG,EAAW,OAAS,QACnC0G,YAAWC,EACXC,gBAAc,2BACb,QAAD,CACIlF,KAAK,OACLmF,oBAAkB,OAClBC,gBAAeH,EACfI,wBAAuBtF,EACvBuF,UAAWnD,EACXoD,QAASC,GACTvJ,oBACA4G,IAAKY,EACLpC,SAAAA,EACAC,SAAAA,EACAC,YAAAA,IAEHH,EAAc,qBACV,MAAD,CACInF,oBACAwC,YACApC,KAAK,SACLoJ,aAAW,eACXzJ,QAASqF,OAAW,EAAYqE,IAAoB,sBAK/DC,EAAD,CACI5J,GAAIkJ,EACJ1I,KAAMsD,EACNpD,aAAcmJ,EACdtH,SAAAA,EACA5B,SAAUwF,EACVpF,UAAAA,EACAb,oBACAoC,MAAOwH,EACPrJ,SAAAA,EACAG,WAAY4F"}