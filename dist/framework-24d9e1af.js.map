{"version":3,"file":"framework-24d9e1af.js","sources":["../packages/utils/react.ts","../packages/utils/dom.ts","../packages/hook/use-position.ts","../packages/utils/common.ts","../packages/hook/use-random-id.ts","../packages/picker/picker.tsx","../packages/constant.ts","../packages/comobobox-simple/combobox.tsx","../packages/comobobox-simple/index.ts"],"sourcesContent":["import * as React from 'react';\n\nexport default React;\nexport const memo = React.memo;\nexport const useCallback = React.useCallback;\nexport const useState = React.useState;\nexport const useRef = React.useRef;\nexport const useReducer = React.useReducer;\nexport const useEffect = React.useEffect;\nexport const forwardRef = React.forwardRef;\nexport const useMemo = React.useMemo;\nexport const Fragment = React.Fragment;\nexport const useContext = React.useContext;\n","export const win = window;\nexport const addEventListener = win.addEventListener;\nexport const removeEventListener = win.removeEventListener;","import React, { useState, useEffect } from '../utils/react';\nimport { win, addEventListener, removeEventListener } from '../utils/dom';\nimport { EVENT_RESIZE, EVENT_SCROLL } from '../constant';\n\nconst none: React.CSSProperties = { display: 'none' };\n\nfunction getPosition(el: HTMLElement | null, pre = none): React.CSSProperties {\n    if (el == null) {\n        return pre;\n    }\n    const viewportHeight = win.innerHeight;\n    const viewportWidth = win.innerWidth;\n\n    const { top, left, bottom, height } = el.getBoundingClientRect();\n\n    if (top < 0 || top > viewportHeight || left < 0 || left > viewportWidth) {\n        return pre;\n    }\n\n    const bottomSpace = viewportHeight - bottom;\n    const rightSpace = viewportWidth - left;\n\n    let style: React.CSSProperties = {\n        position: 'absolute',\n        width: 'max-content',\n    };\n\n    if (top < bottomSpace) {\n        style.top = height;\n        style.maxHeight = Math.floor(viewportHeight - bottom - 5);\n    } else {\n        style.bottom = height;\n        style.maxHeight = top - 5;\n    }\n\n    if (left < rightSpace) {\n        style.left = 0;\n        style.maxWidth = Math.floor(viewportWidth - left - 5);\n    } else {\n        style.right = 0;\n        style.maxWidth = left - 5;\n    }\n\n    return style;\n}\n\nexport function usePickerPosition(\n    ref: React.RefObject<HTMLElement>,\n    calculate = true\n) {\n    const current = ref.current;\n    const [postion, setPosition] = useState(() => getPosition(current));\n\n    useEffect(() => {\n        let busy = false;\n        function doCalculate() {\n            if (calculate && !busy) {\n                busy = true;\n                win.requestAnimationFrame(() => {\n                    setPosition(getPosition(current));\n                    busy = false;\n                });\n            }\n        }\n        addEventListener(EVENT_RESIZE, doCalculate);\n        addEventListener(EVENT_SCROLL, doCalculate);\n\n        if (calculate) {\n            doCalculate();\n        } else {\n            setPosition(none);\n        }\n\n        return () => {\n            removeEventListener(EVENT_RESIZE, doCalculate);\n            removeEventListener(EVENT_SCROLL, doCalculate);\n        };\n    }, [calculate, current]);\n\n    return postion;\n}\n","const { round, random } = Math;\n\nexport function randomId(prefix = '') {\n    return prefix + round(random() + random() * 10e16).toString(32);\n}\n","import { useState } from '../utils/react';\nimport { randomId } from '../utils/common';\n\nexport function useRandomId(prefix?: string) {\n    const id = useState(() => randomId(prefix));\n    return id[0];\n}\n","import React, {\n    memo,\n    useEffect,\n    useMemo,\n    useRef,\n    useState,\n} from '../utils/react';\nimport { usePickerPosition } from '../hook/use-position';\nimport { useRandomId } from '../hook/use-random-id';\nimport { emptyFn } from '../utils/function';\nimport {\n    reaper as $reaper,\n    input as $input,\n    picker as $picker,\n    picker_container as $picker_container,\n    trigger as $trigger,\n} from './picker.module.css';\n\nexport interface PickerProps {\n    autocomplete?: React.AriaAttributes['aria-autocomplete'];\n    autofocus?: boolean;\n    disabled?: boolean;\n    multiple?: boolean;\n    name?: string;\n    required?: boolean;\n    role?: string;\n    id?: string;\n    className?: string;\n    style?: React.CSSProperties;\n    readOnly?: boolean;\n    placeholder?: string;\n    children?: React.ReactElement;\n    onChange?: CallableFunction;\n    triggerIcon?: any;\n}\n\nexport const PickerContext = React.createContext({\n    onClick: (value: any) => {\n        console.log('sfsdfsdfds');\n    },\n    setValue: (value: string) => {},\n});\n\nconst TriggerIcon = memo(function TriggerIcon() {\n    return (\n        <svg viewBox=\"0 0 16 16\">\n            <path\n                fill=\"none\"\n                stroke=\"#343a40\"\n                strokeLinecap=\"round\"\n                strokeLinejoin=\"round\"\n                strokeWidth=\"2\"\n                d=\"M2 5l6 6 6-6\"\n            />\n        </svg>\n    );\n});\n\nfunction Picker(props: PickerProps) {\n    const {\n        autocomplete = 'both',\n        autofocus,\n        children,\n        className = '',\n        disabled,\n        id,\n        multiple,\n        name,\n        onChange,\n        placeholder,\n        readOnly,\n        required,\n        role = 'combobox',\n        style,\n        triggerIcon = <TriggerIcon />,\n    } = props;\n\n    const ref = useRef<HTMLDivElement>(null);\n    const inputRef = useRef<HTMLInputElement>(null);\n\n    const randomId = useRandomId('combobox-');\n    const componentId = id === undefined ? randomId : id;\n\n    const pickerId = componentId + '-picker';\n\n    /* will be extracted in reducer */\n    const [expanded, setExpanded] = useState(false);\n    const [value, setValue] = useState('');\n    const listeners = useMemo(() => {\n        return {\n            onClick: function (selection: any) {\n                typeof onChange === 'function' && onChange(selection);\n            },\n            setValue: function(value: string){\n                if(!multiple){\n                    setExpanded(false);\n                }\n                setValue(value);\n            },\n        };\n    }, [onChange]);\n\n    const pickerStyle = usePickerPosition(ref, expanded);\n    const activeDescendant = undefined;\n    const handleInput = emptyFn;\n    const handleKey = console.log;\n\n    const x = [\n        'ArrowDown',\n        'ArrowUp',\n        'ArrowRight',\n        'ArrowLeft',\n        'Space',\n        'Enter',\n    ];\n    //shiftKey //metaKey or ctrlKey\n\n    useEffect(() => {\n        if (autofocus) {\n            inputRef?.current?.focus();\n        }\n    }, []);\n\n    return (\n        <div\n            id={componentId}\n            className={$reaper + ' ' + className}\n            style={style}\n            role={role}\n            aria-expanded={expanded ? 'true' : 'false'}\n            aria-owns={pickerId}\n            aria-haspopup=\"listbox\"\n            ref={ref}>\n            <div className={$picker_container}>\n                <div>\n                    <input\n                        type=\"text\"\n                        name={name}\n                        aria-autocomplete={autocomplete}\n                        aria-controls={pickerId}\n                        aria-activedescendant={activeDescendant}\n                        onKeyDown={handleKey}\n                        onInput={handleInput}\n                        ref={inputRef}\n                        disabled={disabled}\n                        readOnly={readOnly}\n                        placeholder={placeholder}\n                        className={$input}\n                        required={required}\n                        value={value}\n                    />\n                    <div\n                        tabIndex={-1}\n                        role=\"button\"\n                        aria-label=\"Show picker\"\n                        className={$trigger}\n                        onClick={\n                            disabled\n                                ? undefined\n                                : () => {\n                                      setExpanded(!expanded);\n                                      inputRef?.current?.focus();\n                                  }\n                        }>\n                        {triggerIcon}\n                    </div>\n                </div>\n                <div id={pickerId} className={$picker} style={pickerStyle}>\n                    {expanded ? (\n                        <PickerContext.Provider value={listeners}>\n                            {children}\n                        </PickerContext.Provider>\n                    ) : null}\n                </div>\n            </div>\n        </div>\n    );\n}\n\nexport default memo(Picker);\n","export const KEY_ARROW_DOWN = 'ArrowDown';\nexport const KEY_ARROW_UP = 'ArrowUp';\nexport const KEY_ENTER = 'Enter';\n\nexport const EVENT_RESIZE = 'resize';\nexport const EVENT_SCROLL = 'scroll';\n","import React, { memo, useContext, useRef, useMemo } from '../utils/react';\nimport {\n    listbox as $listbox,\n    option_group as $option_group,\n    option_group_label as $option_group_label,\n    option as $option,\n} from './listbox.module.css';\nimport Picker, { PickerContext, PickerProps } from '../picker';\nimport { setConstantValue } from 'typescript';\n\nexport interface OptGroupProps {\n    disabled?: boolean;\n    label: string;\n    children: any;\n}\n\nexport interface OptionProps {\n    disabled?: boolean;\n    selected?: boolean;\n    value?: any;\n    children: React.ReactElement | string | number;\n}\n\ntype DropDownProps = {\n    children: any;\n};\n\nexport interface ComboboxProps extends PickerProps {}\n\nconst ComboboxContext = React.createContext({ onClick: (value: any) => {} });\nconst OptGroupContext = React.createContext({ disabled: false });\n\nexport function OptGroup(props: OptGroupProps) {\n    const { children, label, disabled = false } = props;\n    return (\n        <li className={$option_group}>\n            <label className={$option_group_label}>{label}</label>\n            <ul>\n                <OptGroupContext.Provider value={{ disabled }}>\n                    {children}\n                </OptGroupContext.Provider>\n            </ul>\n        </li>\n    );\n}\n\nexport function Option(props: OptionProps) {\n    const ref = useRef<HTMLLIElement>(null);\n    const { onClick, setValue } = useContext(PickerContext);\n    const { disabled: disabledGroup } = useContext(OptGroupContext);\n    const { value, children, disabled = false, selected = false } = props;\n    const isDisabled = disabledGroup || disabled;\n    const clickHandler = () => {\n        const current = ref.current;\n        const _value =\n            value === undefined ? current && current.innerText : value;\n        setValue(_value);\n        onClick(_value);\n    };\n\n    return (\n        <li\n            className={$option}\n            ref={ref}\n            onClick={isDisabled ? undefined : clickHandler}>\n            {children}\n        </li>\n    );\n}\n\nfunction DropDown(props: DropDownProps) {\n    // const { onClick, setValue } = useContext(PickerContext);\n    // const listeners = useMemo(() => ({ onClick }), [onClick]);\n    return <ul className={$listbox}>{props.children}</ul>;\n}\n\nfunction Combobox(props: ComboboxProps) {\n    const { children, ...restProps } = props;\n    return (\n        <Picker {...restProps}>\n            <DropDown>{children}</DropDown>\n        </Picker>\n    );\n}\n\nexport default memo(Combobox);\n","import Combobox, { Option as $Option } from './combobox';\n\nexport default Combobox;\nexport const Option = $Option;\n"],"names":["memo","React.memo","React.useCallback","React.useState","React.useRef","React.useEffect","React.useMemo","React.useContext","win","window","addEventListener","removeEventListener","none","display","el","pre","innerHeight","innerWidth","top","left","bottom","height","getBoundingClientRect","viewportHeight","viewportWidth","position","width","maxHeight","Math","floor","rightSpace","maxWidth","right","style","round","random","prefix","useState","toString","randomId","PickerContext","React","createContext","onClick","log","setValue","viewBox","fill","stroke","strokeLinecap","strokeLinejoin","strokeWidth","d","autocomplete","autofocus","children","className","disabled","id","multiple","name","onChange","placeholder","readOnly","required","role","triggerIcon","TriggerIcon","props","useRef","useRandomId","componentId","useMemo","selection","value2","ref","current","getPosition","calculate","busy","requestAnimationFrame","doCalculate","postion","usePickerPosition","expanded","emptyFn","console","focus","$reaper","aria-expanded","aria-owns","pickerId","aria-haspopup","type","aria-autocomplete","aria-controls","aria-activedescendant","onKeyDown","handleKey","onInput","handleInput","inputRef","value","tabIndex","aria-label","pickerStyle","Provider","listeners","label","OptGroupContext","__rest","Picker","__assign","restProps","DropDown","Option","useContext","selected","disabledGroup","isDisabled","innerText","_value"],"mappings":"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"}