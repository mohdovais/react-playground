{"version":3,"file":"framework-f9b60709.js","sources":["../packages/utils/react.ts","../packages/utils/dom.ts","../packages/constant.ts","../packages/hook/use-position.ts","../packages/utils/common.ts","../packages/hook/use-random-id.ts","../packages/picker/context.ts","../packages/utils/object.ts","../packages/picker/state.ts","../packages/picker/picker.tsx","../packages/picker/index.ts","../packages/comobobox/context.ts","../packages/comobobox/option.tsx","../packages/comobobox/optgroup.tsx","../packages/comobobox/helper.ts","../packages/comobobox/combobox.tsx","../packages/comobobox/index.ts"],"sourcesContent":["import * as React from 'react';\n\nexport default React;\nexport const memo = React.memo;\nexport const useCallback = React.useCallback;\nexport const useState = React.useState;\nexport const useRef = React.useRef;\nexport const useReducer = React.useReducer;\nexport const useEffect = React.useEffect;\nexport const forwardRef = React.forwardRef;\nexport const useMemo = React.useMemo;\nexport const Fragment = React.Fragment;\nexport const useContext = React.useContext;\nexport const Children = React.Children;\nexport const isValidElement = React.isValidElement;\nexport const createContext = React.createContext;\n","export const win = window;\nexport const addEventListener = win.addEventListener;\nexport const removeEventListener = win.removeEventListener;","export const KEY_ARROW_DOWN = 'ArrowDown';\nexport const KEY_ARROW_UP = 'ArrowUp';\nexport const KEY_ENTER = 'Enter';\n\nexport const EVENT_RESIZE = 'resize';\nexport const EVENT_SCROLL = 'scroll';\n","import React, { useState, useEffect } from '../utils/react';\nimport { win, addEventListener, removeEventListener } from '../utils/dom';\nimport { EVENT_RESIZE, EVENT_SCROLL } from '../constant';\n\nconst none: React.CSSProperties = { display: 'none' };\n\nfunction getPosition(el: HTMLElement | null, pre = none): React.CSSProperties {\n    if (el == null) {\n        return pre;\n    }\n    const viewportHeight = win.innerHeight;\n    const viewportWidth = win.innerWidth;\n\n    const { top, left, bottom, height, width } = el.getBoundingClientRect();\n\n    if (top < 0 || top > viewportHeight || left < 0 || left > viewportWidth) {\n        return pre;\n    }\n\n    const bottomSpace = viewportHeight - bottom;\n    const rightSpace = viewportWidth - left;\n\n    let style: React.CSSProperties = {\n        position: 'absolute',\n        width: 'max-content',\n        minWidth: width,\n    };\n\n    if (top < bottomSpace) {\n        style.top = height;\n        style.maxHeight = Math.floor(viewportHeight - bottom - 5);\n    } else {\n        style.bottom = height;\n        style.maxHeight = top - 5;\n    }\n\n    if (left < rightSpace) {\n        style.left = 0;\n        style.maxWidth = Math.floor(viewportWidth - left - 5);\n    } else {\n        style.right = 0;\n        style.maxWidth = left - 5;\n    }\n\n    return style;\n}\n\nexport function usePickerPosition(\n    ref: React.RefObject<HTMLElement>,\n    calculate = true\n) {\n    const current = ref.current;\n    const [postion, setPosition] = useState(() => getPosition(current));\n\n    useEffect(() => {\n        let busy = false;\n        function doCalculate() {\n            if (calculate && !busy) {\n                busy = true;\n                win.requestAnimationFrame(() => {\n                    setPosition(getPosition(current));\n                    busy = false;\n                });\n            }\n        }\n        addEventListener(EVENT_RESIZE, doCalculate);\n        addEventListener(EVENT_SCROLL, doCalculate);\n\n        if (calculate) {\n            doCalculate();\n        } else {\n            setPosition(none);\n        }\n\n        return () => {\n            removeEventListener(EVENT_RESIZE, doCalculate);\n            removeEventListener(EVENT_SCROLL, doCalculate);\n        };\n    }, [calculate, current]);\n\n    return postion;\n}\n","const { round, random } = Math;\n\nexport function randomId(prefix = '') {\n    return prefix + round(random() + random() * 10e16).toString(32);\n}\n","import { useState } from '../utils/react';\nimport { randomId } from '../utils/common';\n\nexport function useRandomId(prefix?: string) {\n    const id = useState(() => randomId(prefix));\n    return id[0];\n}\n","import { createContext } from '../utils/react';\n\nexport type Key = {\n    key: string;\n    shiftKey: boolean;\n    ctrlKey: boolean;\n};\n\ntype Context = {\n    keyDown: Key | null;\n    onChange: (value: string) => void;\n};\n\nconst context: Context = {\n    keyDown: null,\n    onChange: (value: string) => {},\n};\n\nexport default createContext(context);\n","const O = Object;\nexport const assign = O.assign;\n\nexport function extend<T, S>(a: T, b: S): {} & T & S {\n    return assign({}, a, b);\n}\n\nexport function hasOwnProperty(object: any, property: string): boolean {\n    return O.prototype.hasOwnProperty.call(object, property);\n}\n","import { useReducer, useCallback, useMemo } from '../utils/react';\nimport { extend } from '../utils/object';\nimport { Key } from './context';\n\ninterface PickerState {\n    expanded: boolean;\n    keyDown: Key | null;\n    value: string;\n    activeDescendant: string;\n}\n\nconst ACTION_SET_VALUE = 0;\nconst ACTION_SET_EXPANDED = 1;\nconst ACTION_SET_KEY = 2;\n\ntype ActionSetValue = {\n    type: typeof ACTION_SET_VALUE;\n    value: string;\n    collapse: boolean;\n};\n\ntype ActionSetExpanded = {\n    type: typeof ACTION_SET_EXPANDED;\n    expand: boolean;\n};\n\ntype ActionSetKey = {\n    type: typeof ACTION_SET_KEY;\n    key: Key;\n    expand: boolean;\n};\n\ntype Action = ActionSetValue | ActionSetExpanded | ActionSetKey;\n\nconst KEYS_TO_BE_PROPAGATED = [\n    'ArrowDown',\n    'ArrowUp',\n    'ArrowRight',\n    'ArrowLeft',\n    ' ',\n    'Enter',\n    'Escape',\n];\n\nfunction pickerReducer(state: PickerState, action: Action): PickerState {\n    switch (action.type) {\n        case ACTION_SET_VALUE:\n            return extend(state, {\n                value: action.value,\n                expanded: action.collapse ? false : state.expanded,\n            });\n        case ACTION_SET_EXPANDED:\n            return extend(state, {\n                expanded: action.expand,\n            });\n        case ACTION_SET_KEY:\n            return extend(state, {\n                keyDown: action.key,\n                expanded: action.expand || state.expanded,\n            });\n    }\n    return state;\n}\n\nexport function usePickerState({ multiple }) {\n    const [state, disptach] = useReducer(pickerReducer, {\n        expanded: false,\n        keyDown: null,\n        value: '',\n        activeDescendant: '',\n    });\n\n    const { expanded, value, keyDown, activeDescendant } = state;\n\n    const expand = useCallback(\n        (expand = true) => {\n            disptach({ type: ACTION_SET_EXPANDED, expand });\n        },\n        [disptach]\n    );\n\n    const onChange = useCallback(\n        (value: string) => {\n            disptach({\n                type: ACTION_SET_VALUE,\n                value,\n                collapse: !multiple,\n            });\n        },\n        [disptach]\n    );\n\n    const context = useMemo(() => ({ onChange, keyDown }), [keyDown]);\n\n    const handleKeyDown = useCallback(function (event: React.KeyboardEvent) {\n        const { key, ctrlKey, metaKey, shiftKey } = event;\n\n        if (key === 'Escape') {\n            return disptach({ type: ACTION_SET_EXPANDED, expand: false });\n        }\n\n        if (KEYS_TO_BE_PROPAGATED.indexOf(key) > -1) {\n            return disptach({\n                type: ACTION_SET_KEY,\n                key: {\n                    key,\n                    shiftKey,\n                    ctrlKey: ctrlKey || metaKey,\n                },\n                expand: key === 'ArrowDown' || key === 'ArrowUp',\n            });\n        }\n    }, []);\n\n    return { expanded, value, activeDescendant, context, expand, handleKeyDown };\n}\n","import React, { memo, useEffect, useRef } from '../utils/react';\nimport { usePickerPosition } from '../hook/use-position';\nimport { useRandomId } from '../hook/use-random-id';\nimport PickerContext from './context';\nimport { usePickerState } from './state';\nimport {\n    reaper as $reaper,\n    input as $input,\n    picker as $picker,\n    picker_container as $picker_container,\n    trigger as $trigger,\n} from './picker.module.css';\n\nexport interface PickerProps {\n    autocomplete?: React.AriaAttributes['aria-autocomplete'];\n    autofocus?: boolean;\n    disabled?: boolean;\n    multiple?: boolean;\n    name?: string;\n    required?: boolean;\n    role?: string;\n    id?: string;\n    className?: string;\n    style?: React.CSSProperties;\n    readOnly?: boolean;\n    placeholder?: string;\n    children?: React.ReactElement;\n    triggerIcon?: any;\n    hideTrigger?: boolean;\n    onInput?: (event: React.FormEvent<HTMLInputElement>) => void;\n    onChange?: CallableFunction;\n    value?: string;\n}\n\nconst TriggerIcon = memo(function TriggerIcon() {\n    return (\n        <svg viewBox=\"0 0 16 16\">\n            <path\n                fill=\"none\"\n                stroke=\"#343a40\"\n                strokeLinecap=\"round\"\n                strokeLinejoin=\"round\"\n                strokeWidth=\"2\"\n                d=\"M2 5l6 6 6-6\"\n            />\n        </svg>\n    );\n});\n\nfunction Picker(props: PickerProps) {\n    const {\n        autocomplete = 'both',\n        autofocus,\n        children,\n        className = '',\n        disabled,\n        id,\n        multiple,\n        name,\n        onInput,\n        placeholder,\n        readOnly,\n        required,\n        role = 'combobox',\n        style,\n        triggerIcon = <TriggerIcon />,\n        hideTrigger,\n    } = props;\n\n    const ref = useRef<HTMLDivElement>(null);\n    const inputRef = useRef<HTMLInputElement>(null);\n    const {\n        expanded,\n        value,\n        activeDescendant,\n        context,\n        expand,\n        handleKeyDown,\n    } = usePickerState({ multiple });\n\n    const randomId = useRandomId('picker-');\n    const componentId = id === undefined ? randomId : id;\n    const pickerId = componentId + '-picker';\n    const pickerStyle = usePickerPosition(ref, expanded);\n\n    const triggerHandler =\n        disabled || hideTrigger\n            ? undefined\n            : () => {\n                  expand(!expanded);\n                  inputRef?.current?.focus();\n              };\n\n    useEffect(() => {\n        if (autofocus) {\n            inputRef?.current?.focus();\n        }\n    }, []);\n\n    return (\n        <div\n            id={componentId}\n            className={$reaper + ' ' + className}\n            style={style}\n            role={role}\n            aria-expanded={expanded ? 'true' : 'false'}\n            aria-owns={pickerId}\n            aria-haspopup=\"listbox\"\n            ref={ref}>\n            <div className={$picker_container}>\n                <div>\n                    <input\n                        type=\"text\"\n                        name={name}\n                        aria-autocomplete={autocomplete}\n                        aria-controls={pickerId}\n                        aria-activedescendant={activeDescendant}\n                        onKeyDown={handleKeyDown}\n                        onInput={onInput}\n                        ref={inputRef}\n                        disabled={disabled}\n                        readOnly={readOnly}\n                        placeholder={placeholder}\n                        className={$input}\n                        required={required}\n                        value={value}\n                    />\n                    {hideTrigger ? null : (\n                        <div\n                            tabIndex={-1}\n                            role=\"button\"\n                            aria-label=\"Show picker\"\n                            className={$trigger}\n                            onClick={triggerHandler}>\n                            {triggerIcon}\n                        </div>\n                    )}\n                </div>\n                <div id={pickerId} className={$picker} style={pickerStyle}>\n                    {expanded ? (\n                        <PickerContext.Provider value={context}>\n                            {children}\n                        </PickerContext.Provider>\n                    ) : null}\n                </div>\n            </div>\n        </div>\n    );\n}\n\nexport default memo(Picker);\n","import Picker from './picker';\nimport $PickerContext from './context';\n\nexport default Picker;\nexport const PickerContext = $PickerContext;\nexport * from './picker';\n","import React from '../utils/react';\n\nexport const DropdownContext = React.createContext({\n    onClick: (value: string) => {},\n});\nexport const OptGroupContext = React.createContext({ disabled: false });\n","import React, { useRef, useContext, memo } from '../utils/react';\nimport { DropdownContext, OptGroupContext } from './context';\nimport { option as $option } from './style.module.css';\n\nexport interface OptionProps {\n    className?: string;\n    style?: React.CSSProperties;\n    disabled?: boolean;\n    selected?: boolean;\n    value: any;\n    children: React.ReactChild | React.ReactChild[];\n}\n\nfunction Option(props: OptionProps) {\n    const {\n        value,\n        children,\n        disabled = false,\n        selected = false,\n        className = '',\n        style,\n    } = props;\n    const ref = useRef<HTMLLIElement>(null);\n    const { onClick } = useContext(DropdownContext);\n    const isDisabled = useContext(OptGroupContext).disabled || disabled;\n\n    return (\n        <li\n            className={\n                $option +\n                ' ' +\n                className +\n                (isDisabled ? ' disabled' : '') +\n                (selected ? ' selected' : '')\n            }\n            style={style}\n            ref={ref}\n            onClick={isDisabled ? undefined : () => onClick(value)}>\n            {children}\n        </li>\n    );\n}\n\nexport default memo(Option);\n","import React, { memo, Children, isValidElement, useMemo } from '../utils/react';\nimport { OptGroupContext } from './context';\nimport Option from './option';\nimport {\n    option_group as $option_group,\n    option_group_label as $option_group_label,\n} from './style.module.css';\n\nexport interface OptGroupProps {\n    className?: string;\n    style?: React.CSSProperties;\n    disabled?: boolean;\n    label: string;\n    children: any;\n}\n\nfunction OptGroup(props: OptGroupProps) {\n    const { className = '', style, label, disabled = false } = props;\n    const children = useMemo(\n        () =>\n            Children.toArray(props.children).filter(\n                (child: React.ReactNode) =>\n                    isValidElement(child) && child.type === Option\n            ),\n        [props.children]\n    );\n\n    return (\n        <li className={$option_group + ' ' + className} style={style}>\n            <label\n                className={$option_group_label + (disabled ? ' disabled' : '')}>\n                {label}\n            </label>\n            {children.length > 0 ? (\n                <OptGroupContext.Provider value={{ disabled }}>\n                    <ul>{children}</ul>\n                </OptGroupContext.Provider>\n            ) : null}\n        </li>\n    );\n}\n\nexport default memo(OptGroup);\n","import React, { Children, isValidElement } from '../utils/react';\nimport OptGroup from './optgroup';\nimport Option from './option';\n\ntype Children = React.ReactElement | React.ReactElement[];\n\nexport function validateChildren(children?: Children) {\n    return Children.toArray(children).filter(\n        (child: React.ReactElement) =>\n            isValidElement(child) &&\n            (child.type === Option || child.type === OptGroup)\n    );\n}\n\nfunction doGetValue(children: React.ReactElement[], values: any[]) {\n    for (let i = 0, length = children.length; i < length; i++) {\n        const child = children[i];\n        if (child.type === Option) {\n            const props = child.props;\n            if (props.selected) {\n                values.push(props.value);\n            }\n        } else if (child.type === OptGroup) {\n            doGetValue(child.props.children, values);\n        }\n    }\n\n    return values;\n}\n\nexport function getChildrenValue(children: React.ReactElement[]) {\n    return doGetValue(children, []);\n}\n","import React, { memo, useContext, useMemo, useState } from '../utils/react';\nimport Picker, { PickerContext, PickerProps } from '../picker';\nimport { DropdownContext } from './context';\nimport { getChildrenValue, validateChildren } from './helper';\nimport { listbox as $listbox } from './style.module.css';\n\ntype DropDownProps = {\n    children: any;\n    multiple?: boolean;\n};\n\nexport interface ComboboxProps extends PickerProps {\n    children?: React.ReactElement | React.ReactElement[];\n}\n\nconst DropDown = memo(function DropDown(props: DropDownProps) {\n    const { keyDown, onChange } = useContext(PickerContext);\n    const { children, multiple = false } = props;\n    const single = !multiple;\n\n    const context = useMemo(() => ({ onClick: onChange }), [onChange]);\n\n    return (\n        <ul className={$listbox}>\n            <DropdownContext.Provider value={context}>\n                {children}\n            </DropdownContext.Provider>\n        </ul>\n    );\n});\n\nfunction Combobox(props: ComboboxProps) {\n    const { className = '', children, ...restProps } = props;\n    const singleSelection = !props.multiple;\n    const validChildren = useMemo(() => validateChildren(children), [children]);\n    const values = useMemo(() => getChildrenValue(validChildren), [\n        validChildren,\n    ]);\n    const [value, setValue] = useState(props.value);\n\n    if (singleSelection && values.length > 1) {\n        //setValue(values[0]);\n        // modify tree\n    }\n\n    console.log(value);\n    return (\n        <Picker {...restProps} className={'combobox ' + className}>\n            <DropDown multiple={props.multiple}>{validChildren}</DropDown>\n        </Picker>\n    );\n}\n\nexport default memo(Combobox);\n","import Combobox from './combobox';\nimport $Option from './option';\nimport $OptGroup from './optgroup';\n\nexport default Combobox;\nexport const OptGroup = $OptGroup;\nexport const Option = $Option;\n"],"names":["React.memo","React.useCallback","React.useState","React.useRef","React.useReducer","React.useEffect","React.useMemo","React.useContext","React.Children","React.isValidElement","React.createContext","$reaper","$picker_container","$input","$trigger","$picker","PickerContext","$option","Option","$option_group","$option_group_label","OptGroup","$listbox","Picker"],"mappings":";;MAGa,OAAOA;oBACOC;iBACHC;eACFC;mBACIC;kBACDC;gBAEFC;mBAEGC;iBACFC;uBACMC;sBACDC;;MCfhB,MAAM;yBACa,IAAI;4BACD,IAAI;;qBCEX;qBACA;;ACD5B,MAAM,OAA4B,CAAE,SAAS;AAE7C,+BAAmD;AAC/C,MAAI,MAAM;AACN,WAAO;AAAA;AAEX,yBAAuB,IAAI;AAC3B,wBAAsB,IAAI;AAE1B,SAAQ,KAAK,MAAM,QAAQ,QAAQ,SAAU,GAAG;AAEhD,MAAI,MAAM,KAAK,MAAM,kBAAkB,OAAO,KAAK,OAAO;AACtD,WAAO;AAAA;AAGX,sBAAoB,iBAAiB;AACrC,qBAAmB,gBAAgB;AAEnC,cAAiC;AAAA,IAC7B,UAAU;AAAA,IACV,OAAO;AAAA,IACP,UAAU;AAAA;AAGd,MAAI,MAAM;AACN,UAAM,MAAM;AACZ,UAAM,YAAY,KAAK,MAAM,iBAAiB,SAAS;AAAA;AAEvD,UAAM,SAAS;AACf,UAAM,YAAY,MAAM;AAAA;AAG5B,MAAI,OAAO;AACP,UAAM,OAAO;AACb,UAAM,WAAW,KAAK,MAAM,gBAAgB,OAAO;AAAA;AAEnD,UAAM,QAAQ;AACd,UAAM,WAAW,OAAO;AAAA;AAG5B,SAAO;AAAA;4CAKK;AAEZ,kBAAgB,IAAI;AACpB,iCAA+B,SAAS,MAAM,YAAY;AAE1D,YAAU;AACN,eAAW;AACX;AACI,UAAI,aAAa,CAAC;AACd,eAAO;AACP,YAAI,sBAAsB;AACtB,sBAAY,YAAY;AACxB,iBAAO;AAAA;AAAA;AAAA;AAInB,qBAAiB,cAAc;AAC/B,qBAAiB,cAAc;AAE/B,QAAI;AACA;AAAA;AAEA,kBAAY;AAAA;AAGhB,WAAO;AACH,0BAAoB,cAAc;AAClC,0BAAoB,cAAc;AAAA;AAAA,KAEvC,CAAC,WAAW;AAEf,SAAO;AAAA;;AChFX,MAAM,CAAE,OAAO,UAAW;2BAEQ;AAC9B,SAAO,SAAS,MAAM,WAAW,WAAW,MAAO,SAAS;AAAA;;qBCApC;AACxB,aAAW,SAAS,MAAM,SAAS;AACnC,SAAO,GAAG;AAAA;;ACQd,MAAM,UAAmB;AAAA,EACrB,SAAS;AAAA,EACT,UAAU;AAAA;AAAA;AAGd,qBAAe,cAAc;;AClB7B,MAAM,IAAI;eACY,EAAE;;AAGpB,SAAO,OAAO,IAAI,GAAG;AAAA;;ACOzB,MAAM,mBAAmB;AACzB,4BAA4B;AAC5B,uBAAuB;AAqBvB,8BAA8B;AAAA,EAC1B;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA;AAGJ;AACI,UAAQ,OAAO;AAAA,SACN;AACD,aAAO,OAAO,OAAO;AAAA,QACjB,OAAO,OAAO;AAAA,QACd,UAAU,OAAO,WAAW,QAAQ,MAAM;AAAA;AAAA,SAE7C;AACD,aAAO,OAAO,OAAO;AAAA,QACjB,UAAU,OAAO;AAAA;AAAA,SAEpB;AACD,aAAO,OAAO,OAAO;AAAA,QACjB,SAAS,OAAO;AAAA,QAChB,UAAU,OAAO,UAAU,MAAM;AAAA;AAAA;AAG7C,SAAO;AAAA;yBAGsB;AAC7B,4BAA0B,WAAW,eAAe;AAAA,IAChD,UAAU;AAAA,IACV,SAAS;AAAA,IACT,OAAO;AAAA,IACP,kBAAkB;AAAA;AAGtB,SAAQ,UAAU,OAAO,SAAS,oBAAqB;AAEvD,iBAAe,YACX,WAAU;AACN,aAAS,CAAE,MAAM,qBAAqB;AAAA,KAE1C,CAAC;AAGL,mBAAiB,YACb;AACI,aAAS;AAAA,MACL,MAAM;AAAA,MACN;AAAA,MACA,UAAU,CAAC;AAAA;AAAA,KAGnB,CAAC;AAGL,mBAAgB,QAAQ,QAAS,UAAU,WAAY,CAAC;AAExD,wBAAsB,YAAY;AAC9B,WAAQ,KAAK,SAAS,SAAS,YAAa;AAE5C,QAAI,QAAQ;AACR,aAAO,SAAS,CAAE,MAAM,qBAAqB,QAAQ;AAAA;AAGzD,QAAI,sBAAsB,QAAQ,OAAO;AACrC,aAAO,SAAS;AAAA,QACZ,MAAM;AAAA,QACN,KAAK;AAAA,UACD;AAAA,UACA;AAAA,UACA,SAAS,WAAW;AAAA;AAAA,QAExB,QAAQ,QAAQ,eAAe,QAAQ;AAAA;AAAA;AAAA,KAGhD;AAEH,SAAO,CAAE,UAAU,OAAO,kBAAkB,mBAAS,QAAQ;AAAA;;;;;;;;AChFjE,MAAM,cAAc,KAAK;AACrB,6CACK,OAAD;AAAA,IAAK,SAAQ;AAAA,yCACR,QAAD;AAAA,IACI,MAAK;AAAA,IACL,QAAO;AAAA,IACP,eAAc;AAAA,IACd,gBAAe;AAAA,IACf,aAAY;AAAA,IACZ,GAAE;AAAA;AAAA;AAMlB;AACI;AAAA,IACI,eAAe;AAAA,IACf;AAAA,IACA;AAAA,IACA,YAAY;AAAA,IACZ;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA,OAAO;AAAA,IACP;AAAA,IACA,kDAAe,aAAD;AAAA,IACd;AAAA,MACA;AAEJ,cAAY,OAAuB;AACnC,mBAAiB,OAAyB;AAC1C;AAAA,IACI;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,MACA,eAAe,CAAE;AAErB,mBAAiB,YAAY;AAC7B,sBAAoB,OAAO,SAAY,WAAW;AAClD,mBAAiB,cAAc;AAC/B,sBAAoB,kBAAkB,KAAK;AAE3C,yBACI,YAAY,cACN,SACA;AAxFd;AAyFkB,WAAO,CAAC;AACR,+CAAU,YAAV,mBAAmB;AAAA;AAGjC,YAAU;AA7Fd;AA8FQ,QAAI;AACA,iDAAU,YAAV,mBAAmB;AAAA;AAAA,KAExB;AAEH,6CACK,OAAD;AAAA,IACI,IAAI;AAAA,IACJ,WAAWC,SAAU,MAAM;AAAA,IAC3B;AAAA,IACA;AAAA,IACA,iBAAe,WAAW,SAAS;AAAA,IACnC,aAAW;AAAA,IACX,iBAAc;AAAA,IACd;AAAA,yCACC,OAAD;AAAA,IAAK,WAAWC;AAAA,yCACX,OAAD,0CACK,SAAD;AAAA,IACI,MAAK;AAAA,IACL;AAAA,IACA,qBAAmB;AAAA,IACnB,iBAAe;AAAA,IACf,yBAAuB;AAAA,IACvB,WAAW;AAAA,IACX;AAAA,IACA,KAAK;AAAA,IACL;AAAA,IACA;AAAA,IACA;AAAA,IACA,WAAWC;AAAA,IACX;AAAA,IACA;AAAA,MAEH,cAAc,2CACV,OAAD;AAAA,IACI,UAAU;AAAA,IACV,MAAK;AAAA,IACL,cAAW;AAAA,IACX,WAAWC;AAAA,IACX,SAAS;AAAA,KACR,mDAIZ,OAAD;AAAA,IAAK,IAAI;AAAA,IAAU,WAAWC;AAAA,IAAS,OAAO;AAAA,KACzC,+CACIC,eAAc,UAAf;AAAA,IAAwB,OAAO;AAAA,KAC1B,YAEL;AAAA;AAOxB,eAAe,KAAK;;MClJP,gBAAgB;;MCFhB,kBAAkB,MAAM,cAAc;AAAA,EAC/C,SAAS;AAAA;AAAA;wBAEkB,MAAM,cAAc,CAAE,UAAU;;;;;;;ACQ/D,gBAAgB;AACZ;AAAA,IACI;AAAA,IACA;AAAA,IACA,WAAW;AAAA,IACX,WAAW;AAAA,IACX,YAAY;AAAA,IACZ;AAAA,MACA;AACJ,cAAY,OAAsB;AAClC,SAAQ,WAAY,WAAW;AAC/B,qBAAmB,WAAW,iBAAiB,YAAY;AAE3D,6CACK,MAAD;AAAA,IACI,WACIC,SACA,MACA,0BACc,cAAc,kBAChB,cAAc;AAAA,IAE9B;AAAA,IACA;AAAA,IACA,SAAS,aAAa,SAAY,MAAM,QAAQ;AAAA,KAC/C;AAAA;AAKb,cAAe,KAAK;;AC3BpB,kBAAkB;AACd,SAAQ,YAAY,IAAI,OAAO,OAAO,WAAW,SAAU;AAC3D,mBAAiB,QACb,MACI,SAAS,QAAQ,MAAM,UAAU,OAC7B,WACI,eAAe,UAAU,MAAM,SAASC,UAEpD,CAAC,MAAM;AAGX,6CACK,MAAD;AAAA,IAAI,WAAWC,eAAgB,MAAM;AAAA,IAAW;AAAA,yCAC3C,SAAD;AAAA,IACI,WAAWC,iCAAkC,cAAc;AAAA,KAC1D,QAEJ,SAAS,SAAS,wCACd,gBAAgB,UAAjB;AAAA,IAA0B,OAAO,CAAE;AAAA,yCAC9B,MAAD,MAAK,aAET;AAAA;AAKhB,gBAAe,KAAK;;0BCpCa;AAC7B,SAAO,SAAS,QAAQ,UAAU,OAC9B,WACI,eAAe,iBACR,SAASF,WAAU,MAAM,SAASG;AAAA;AAIrD;AACI,eAAa,YAAY,SAAS,QAAQ,IAAI,QAAQ;AAClD,kBAAc,SAAS;AACvB,QAAI,MAAM,SAASH;AACf,oBAAc,MAAM;AACpB,UAAI,MAAM;AACN,eAAO,KAAK,MAAM;AAAA;AAAA,eAEf,MAAM,SAASG;AACtB,iBAAW,MAAM,MAAM,UAAU;AAAA;AAAA;AAIzC,SAAO;AAAA;;AAIP,SAAO,WAAW,UAAU;AAAA;;;;;;;;;;;;;;;;;;AChBhC,MAAM,WAAW,KAAK;AAClB,SAAQ,SAAS,YAAa,WAAW;AACzC,SAAQ,UAAU,WAAW,SAAU;AAGvC,mBAAgB,QAAQ,QAAS,SAAS,YAAa,CAAC;AAExD,6CACK,MAAD;AAAA,IAAI,WAAWC;AAAA,yCACV,gBAAgB,UAAjB;AAAA,IAA0B,OAAO;AAAA,KAC5B;AAAA;AAMjB;AACI,SAAQ,YAAY,IAAI,YAA2B,mBAAd,OAAc,OAAd,CAA7B,aAAgB;AACxB,0BAAwB,CAAC,MAAM;AAC/B,wBAAsB,QAAQ,MAAM,iBAAiB,WAAW,CAAC;AACjE,iBAAe,QAAQ,MAAM,iBAAiB,gBAAgB;AAAA,IAC1D;AAAA;AAEJ,4BAA0B,SAAS,MAAM;AAEzC,MAAI,mBAAmB,OAAO,SAAS;AAKvC,UAAQ,IAAI;AACZ,6CACKC,UAAD,sBAAY,YAAZ;AAAA,IAAuB,WAAW,cAAc;AAAA,0CAC3C,UAAD;AAAA,IAAU,UAAU,MAAM;AAAA,KAAW;AAAA;AAKjD,iBAAe,KAAK;;MChDPF,aAAW;iBACF;;;;"}