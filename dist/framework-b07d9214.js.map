{"version":3,"file":"framework-b07d9214.js","sources":["../packages/utils/react.ts","../packages/utils/array.ts","../packages/combobox/listbox-items.tsx","../packages/combobox/listbox.tsx","../packages/utils/dom.ts","../packages/combobox/use-position.ts","../packages/utils/object.ts","../packages/combobox/combobox.store.ts","../packages/utils/common.ts","../packages/combobox/combobox.tsx","../packages/combobox/use-actions.ts","../packages/utils/function.ts"],"sourcesContent":["import * as React from 'react';\n\nexport default React;\nexport const memo = React.memo;\nexport const useCallback = React.useCallback;\nexport const useState = React.useState;\nexport const useRef = React.useRef;\nexport const useReducer = React.useReducer;\nexport const useEffect = React.useEffect;\nexport const forwardRef = React.forwardRef;\nexport const useMemo = React.useMemo;\nexport const Fragment = React.Fragment;\n","export function ensureArray<T = undefined>(subject?: T | T[] | null) {\n    if (subject == null) return [];\n    if (Array.isArray(subject)) return subject;\n    return [subject];\n}\n","/// <reference path=\"combobox.d.ts\" />\nimport React, { memo, useEffect, useReducer } from '../utils/react';\nimport { ensureArray } from '../utils/array';\nimport {\n    option as $option,\n    focus as $focus,\n    selected as $selected,\n    _default as $default,\n} from './listbox.module.css';\nimport {\n    Json,\n    ListBoxItemContentProps,\n    ListBoxItemProps,\n    ListBoxProps,\n    KeyboardNavType,\n} from 'Combobox';\n\nfunction scrollIntoView(el: HTMLElement | null, smooth = true) {\n    if (el == null) return;\n    setTimeout(\n        () =>\n            el.scrollIntoView({\n                behavior: smooth ? 'smooth' : 'auto',\n                block: 'nearest',\n            }),\n        100\n    );\n}\n\nexport const listBoxItemContentFactory = (displayField: string) =>\n    memo(function ListBoxItem<T extends Json>(\n        props: ListBoxItemContentProps<T>\n    ) {\n        return <div className={$default}>{props.record[displayField]}</div>;\n    });\n\nconst ListBoxItem = memo(function ListBoxItem<T>(props: ListBoxItemProps<T>) {\n    const { id, onClick, className, record, children } = props;\n    return (\n        <li\n            role=\"option\"\n            id={id}\n            className={$option + ' ' + className}\n            onClick={() => onClick(record)}>\n            {children}\n        </li>\n    );\n});\n\nexport function ListBoxItems(props: ListBoxProps<Json>) {\n    const { id, data, keyboard, itemRenderer, onSelect } = props;\n    const selection = ensureArray(props.selection);\n\n    const totalItems = data.length;\n    const idPrefx = id + '-option-';\n    const firstSelectedIndex = data.indexOf(selection[0]);\n    const firstSelectedId =\n        firstSelectedIndex === -1 ? '' : idPrefx + firstSelectedIndex;\n\n    const OptionRenderer = itemRenderer;\n\n    const [focusIndex, disptachKeyboard] = useReducer(function (\n        index: number,\n        action: KeyboardNavType\n    ) {\n        let _index = index;\n        switch (action.key) {\n            case 'ArrowUp':\n                _index = index === -1 ? totalItems - 1 : index - 1;\n                break;\n            case 'ArrowDown':\n                _index = index === -1 ? 0 : index + 1;\n                break;\n        }\n        return _index === index\n            ? index\n            : totalItems === 0\n            ? -1\n            : (totalItems + _index) % totalItems;\n    },\n    firstSelectedIndex);\n\n    useEffect(() => {\n        if (keyboard && keyboard.key) disptachKeyboard(keyboard);\n    }, [keyboard]);\n\n    useEffect(() => {\n        if (firstSelectedId !== '') {\n            scrollIntoView(document.getElementById(firstSelectedId), false);\n        }\n    }, [firstSelectedIndex]);\n\n    useEffect(() => {\n        if (focusIndex !== -1) {\n            scrollIntoView(\n                document.getElementById(idPrefx + focusIndex),\n                false\n            );\n        }\n    }, [focusIndex]);\n\n    return (\n        <ul>\n            {data.map((item, index) => {\n                const liId = idPrefx + index;\n                const isSelected = selection.indexOf(item) !== -1;\n                const liClassName =\n                    (focusIndex === index ? 'focus ' + $focus : '') +\n                    (isSelected ? ' selected ' + $selected : '');\n\n                return (\n                    <ListBoxItem\n                        key={liId}\n                        id={liId}\n                        className={liClassName}\n                        record={item}\n                        selected={isSelected}\n                        onClick={onSelect}>\n                        <OptionRenderer record={item} selected={isSelected} />\n                    </ListBoxItem>\n                );\n            })}\n        </ul>\n    );\n}\n","/// <reference path=\"combobox.d.ts\" />\nimport React, { memo, useCallback } from '../utils/react';\nimport { ensureArray } from '../utils/array';\nimport {\n    listbox as $listbox,\n    _default as $default,\n} from './listbox.module.css';\nimport { ListBoxItems } from './listbox-items';\nimport { ListBoxProps, ListBoxItemContentProps, Json } from 'Combobox';\n\nfunction ListBox(props: ListBoxProps<Json>) {\n    const {\n        id,\n        className = '',\n        style,\n        expanded,\n        data,\n        keyboard,\n        itemRenderer,\n        onSelect,\n        selection,\n    } = props;\n\n    const handleSelect = useCallback((item) => onSelect(item), [onSelect]);\n\n    return (\n        <div\n            id={id}\n            role=\"listbox\"\n            className={$listbox + ' ' + className}\n            style={style}\n            tabIndex={-1}>\n            {expanded === true ? (\n                <ListBoxItems\n                    id={id}\n                    data={ensureArray(data)}\n                    keyboard={keyboard}\n                    itemRenderer={itemRenderer}\n                    onSelect={handleSelect}\n                    selection={selection}\n                />\n            ) : null}\n        </div>\n    );\n}\n\nexport const listBoxItemContentFactory = (displayField: string) =>\n    memo(function ListBoxItem<T extends Json>(\n        props: ListBoxItemContentProps<T>\n    ) {\n        return <div className={$default}>{props.record[displayField]}</div>;\n    });\n\nexport default memo(ListBox);\n","export const win = window;\nexport const addEventListener = win.addEventListener;\nexport const removeEventListener = win.removeEventListener;","import React, { useState, useEffect } from '../utils/react';\nimport { win, addEventListener, removeEventListener } from '../utils/dom';\n\nconst displayNone = {\n    display: 'none',\n};\n\nfunction getPosition(el: HTMLDivElement | null): React.CSSProperties {\n    if (el == null) {\n        return displayNone;\n    }\n    const viewportHeight = win.innerHeight;\n    const { top, bottom, height } = el.getBoundingClientRect();\n\n    if (top < 0 || top > viewportHeight) {\n        return displayNone;\n    }\n\n    const bottomSpace = viewportHeight - bottom;\n\n    if (top < bottomSpace) {\n        return {\n            top: height,\n            maxHeight: viewportHeight - bottom - 5,\n        };\n    }\n\n    return {\n        bottom: height,\n        maxHeight: top - 5,\n    };\n}\n\nexport function usePickerPosition(\n    ref: React.RefObject<HTMLDivElement>,\n    calculate: boolean\n) {\n    const current = ref.current;\n    const [postion, setPosition] = useState(() => getPosition(current));\n\n    useEffect(() => {\n        let busy = false;\n        function doCalculate() {\n            if (calculate && !busy) {\n                busy = true;\n                win.requestAnimationFrame(() => {\n                    setPosition(getPosition(current));\n                    busy = false;\n                });\n            }\n        }\n        addEventListener('resize', doCalculate);\n        addEventListener('scroll', doCalculate);\n\n        if (calculate) {\n            doCalculate();\n        } else {\n            setPosition(displayNone);\n        }\n\n        return () => {\n            removeEventListener('resize', doCalculate);\n            removeEventListener('scroll', doCalculate);\n        };\n    }, [calculate, current]);\n\n    return postion;\n}\n","const O = Object;\nexport const assign = O.assign;\n\nexport function extend<T, S>(a: T, b: S): {} & T & S {\n    return assign({}, a, b);\n}\n\nexport function hasOwnProperty(object: any, property: string): boolean {\n    return O.prototype.hasOwnProperty.call(object, property);\n}\n","/// <reference path=\"combobox.d.ts\" />\nimport { extend } from '../utils/object';\nimport { Json, KeyboardNavType } from 'Combobox';\nimport { ComboboxState, ComboboxAction } from 'Combobox';\n\nexport const ACTION_TYPE_COLLAPSE = 0;\nexport const ACTION_TYPE_EXPAND = 1;\nexport const ACTION_TYPE_TOGGLE = 2;\nexport const ACTION_TYPE_KEYBOARD_NAVIGATION = 3;\nexport const ACTION_TYPE_SELECT = 4;\nexport const ACTION_TYPE_SET_DATA = 5;\nexport const ACTION_TYPE_LOCAL_SEARCH = 6;\nexport const ACTION_TYPE_SET_WAITING = 7;\n\nexport const initialState = {\n    id: '',\n    expanded: false,\n    waiting: false,\n    selection: [],\n    data: [],\n    range: [],\n    keyboard: {\n        key: '',\n        count: 0,\n    },\n};\n\nfunction keyboardNavigation(nav: KeyboardNavType, key: string) {\n    return {\n        key,\n        count: nav.key === key ? nav.count + 1 : 0,\n    };\n}\n\nexport function comboboxReducer<T extends Json>(\n    state: ComboboxState<T>,\n    action: ComboboxAction<T>\n): ComboboxState<T> {\n    switch (action.type) {\n        case ACTION_TYPE_COLLAPSE:\n            return extend(state, {\n                expanded: false,\n                focusIndex: -1,\n            });\n\n        case ACTION_TYPE_EXPAND:\n            return extend(state, {\n                expanded: true,\n            });\n\n        case ACTION_TYPE_TOGGLE:\n            return comboboxReducer(state, {\n                type: state.expanded\n                    ? ACTION_TYPE_COLLAPSE\n                    : ACTION_TYPE_EXPAND,\n            });\n\n        case ACTION_TYPE_KEYBOARD_NAVIGATION:\n            return extend(state, {\n                expanded: true,\n                keyboard: keyboardNavigation(state.keyboard, action.key),\n            });\n\n        case ACTION_TYPE_SELECT:\n            return extend(state, {\n                expanded: false,\n                focusIndex: -1,\n                range: state.data,\n                selection: action.selection,\n            });\n\n        case ACTION_TYPE_LOCAL_SEARCH: {\n            const search = new RegExp(action.query, 'i');\n            return extend(state, {\n                expanded: true,\n                range: state.data.filter((record) =>\n                    search.test(record.toString())\n                ),\n            });\n        }\n\n        case ACTION_TYPE_SET_DATA:\n            return extend(state, {\n                expanded: action.expand,\n                waiting: false,\n                data: action.data,\n                range: action.data,\n            });\n\n        case ACTION_TYPE_SET_WAITING:\n            return extend(state, {\n                waiting: action.waiting,\n            });\n    }\n\n    return state;\n}\n","const { round, random } = Math;\n\nexport function randomId(prefix = '') {\n    return prefix + round(random() + random() * 10e16).toString(32);\n}\n","import React, {\n    useCallback,\n    useRef,\n    useReducer,\n    useEffect,\n    useMemo,\n    memo,\n} from '../utils/react';\nimport ListBox, {\n    OptionRendererType,\n    listBoxItemContentFactory,\n} from './listbox';\nimport { usePickerPosition } from './use-position';\nimport { comboboxReducer, initialState, Json } from './combobox.store';\nimport { useComboboxActions } from './use-actions';\nimport { randomId } from '../utils/common';\nimport { debounced } from '../utils/function';\nimport {\n    combobox as $combobox,\n    input_wrapper as $input_wrapper,\n    input as $input,\n    trigger as $trigger,\n    picker as $picker,\n    waiting as $waiting,\n} from './combobox.module.scss';\nimport { extend } from '../utils/object';\n\nexport interface ComboboxCommonProps<T> {\n    displayField?: string;\n    valueField?: string;\n    onChange?: (selection: T[]) => void;\n    optionRenderer?: OptionRendererType<T>;\n    displayRenderer?: (record: T) => JSX.Element | string;\n    hideTrigger?: boolean;\n    disabled?: boolean;\n    readOnly?: boolean;\n    className?: string;\n    forceSelection?: boolean;\n    placeholder?: string;\n}\n\nexport interface ComboboxLocalProps<T> extends ComboboxCommonProps<T> {\n    queryMode?: 'local';\n    data: T[];\n    onRemoteQuery?: undefined;\n}\n\nexport interface ComboboxRemoteProps<T> extends ComboboxCommonProps<T> {\n    queryMode: 'remote';\n    data?: undefined;\n    onRemoteQuery: (search: string) => T[] | Promise<T[]>;\n}\n\nexport type ComboboxProps<T> = ComboboxLocalProps<T> | ComboboxRemoteProps<T>;\n\nfunction focus(ref: React.RefObject<HTMLElement>) {\n    let el = ref.current;\n    if (el) {\n        el.focus();\n    }\n}\n\nfunction Combobox(props: ComboboxProps<Json>) {\n    const comboboxRef = useRef<HTMLDivElement>(null);\n    const inputRef = useRef<HTMLInputElement>(null);\n    const activeDescendantId = '';\n\n    const {\n        queryMode = 'local',\n        displayField = 'text',\n        className = '',\n        forceSelection = true,\n        data,\n        hideTrigger,\n        disabled,\n        readOnly,\n        placeholder,\n        onChange,\n        onRemoteQuery,\n        optionRenderer,\n        displayRenderer,\n    } = props;\n\n    const optionRendererMemo = useMemo(() => {\n        return optionRenderer == null\n            ? listBoxItemContentFactory(displayField)\n            : optionRenderer;\n    }, [displayField, optionRenderer]);\n\n    const [state, dispatch] = useReducer(\n        comboboxReducer,\n        initialState,\n        (state) => extend(state, { id: randomId('combobox-'), displayField })\n    );\n\n    const {\n        toggle,\n        select,\n        collapse,\n        handleKeys,\n        handleLocalSearch,\n        setData,\n        setWaiting,\n    } = useComboboxActions(dispatch);\n\n    const { id, expanded, selection, range, waiting, keyboard } = state;\n    const pickerStyle = usePickerPosition(comboboxRef, expanded);\n    const pickerId = id + '-picker';\n\n    const handleTriggerClick = useCallback(() => {\n        focus(inputRef);\n        toggle();\n    }, [inputRef]);\n\n    const handleInput = useCallback(\n        debounced((event: React.FormEvent<HTMLInputElement>) => {\n            const input = event.target as HTMLInputElement;\n            const text = input.value;\n            if (queryMode === 'local') {\n                handleLocalSearch(text);\n            } else {\n                setWaiting(true);\n                Promise.resolve(\n                    typeof onRemoteQuery === 'function' && onRemoteQuery(text)\n                ).then((data) => {\n                    data !== false && setData(data, true);\n                });\n            }\n        }),\n        [queryMode, onRemoteQuery, setWaiting, handleLocalSearch]\n    );\n\n    useEffect(() => {\n        if (data !== undefined) {\n            setData(data);\n        }\n    }, [data]);\n\n    useEffect(() => {\n        if (typeof onChange === 'function') {\n            onChange(selection);\n        }\n    }, [selection, onChange]);\n\n    const cls =\n        $combobox + ' ' + className + (waiting ? ' wating ' + $waiting : '');\n\n    return (\n        <div className={cls} ref={comboboxRef}>\n            <div\n                className={$input_wrapper}\n                role=\"combobox\"\n                aria-expanded={expanded ? 'true' : 'false'}\n                aria-owns={pickerId}\n                aria-haspopup=\"listbox\">\n                <input\n                    type=\"text\"\n                    aria-autocomplete=\"both\"\n                    aria-controls={pickerId}\n                    aria-activedescendant={activeDescendantId}\n                    onKeyDown={handleKeys}\n                    onInput={handleInput}\n                    className={$input}\n                    ref={inputRef}\n                    disabled={disabled}\n                    readOnly={readOnly}\n                    placeholder={placeholder}\n                />\n                {hideTrigger ? null : (\n                    <div\n                        className={$trigger}\n                        tabIndex={-1}\n                        role=\"button\"\n                        aria-label=\"Show options\"\n                        onClick={disabled ? undefined : handleTriggerClick}>\n                        ▼\n                    </div>\n                )}\n            </div>\n            <ListBox\n                id={pickerId}\n                data={range}\n                itemRenderer={optionRendererMemo}\n                expanded={expanded}\n                onSelect={select}\n                selection={selection}\n                className={$picker}\n                style={pickerStyle}\n                keyboard={keyboard}\n            />\n        </div>\n    );\n}\n\nexport default memo(Combobox);\n","/// <reference path=\"combobox.d.ts\" />\nimport { useCallback } from '../utils/react';\nimport {\n    ACTION_TYPE_COLLAPSE,\n    ACTION_TYPE_EXPAND,\n    ACTION_TYPE_KEYBOARD_NAVIGATION,\n    ACTION_TYPE_LOCAL_SEARCH,\n    ACTION_TYPE_SELECT,\n    ACTION_TYPE_SET_DATA,\n    ACTION_TYPE_TOGGLE,\n    ACTION_TYPE_SET_WAITING,\n} from './combobox.store';\nimport { ComboboxAction } from 'Combobox';\n\nexport function useComboboxActions<Json>(\n    dispatch: React.Dispatch<ComboboxAction<Json>>\n) {\n    const deps = [dispatch];\n\n    const expand = useCallback(\n        () => dispatch({ type: ACTION_TYPE_EXPAND }),\n        deps\n    );\n\n    const collapse = useCallback(\n        () => dispatch({ type: ACTION_TYPE_COLLAPSE }),\n        deps\n    );\n\n    const toggle = useCallback(\n        () => dispatch({ type: ACTION_TYPE_TOGGLE }),\n        deps\n    );\n\n    const select = useCallback(\n        (selection: Json) => dispatch({ type: ACTION_TYPE_SELECT, selection }),\n        deps\n    );\n\n    const handleKeys = useCallback(function (\n        event: React.KeyboardEvent<HTMLInputElement>\n    ) {\n        switch (event.key) {\n            case 'ArrowDown':\n            case 'ArrowUp':\n            case 'Enter':\n                dispatch({\n                    type: ACTION_TYPE_KEYBOARD_NAVIGATION,\n                    key: event.key,\n                });\n                break;\n\n            case 'Escape':\n                collapse();\n                break;\n        }\n    },\n    deps);\n\n    const handleLocalSearch = useCallback(\n        (query: string) => dispatch({ type: ACTION_TYPE_LOCAL_SEARCH, query }),\n        deps\n    );\n\n    const setData = useCallback((data: Json[], expand = false) => {\n        dispatch({ type: ACTION_TYPE_SET_DATA, data, expand });\n    }, deps);\n\n    const setWaiting = useCallback(\n        (waiting: boolean) =>\n            dispatch({ type: ACTION_TYPE_SET_WAITING, waiting }),\n        deps\n    );\n\n    return {\n        expand,\n        collapse,\n        toggle,\n        select,\n        handleKeys,\n        handleLocalSearch,\n        setData,\n        setWaiting,\n    };\n}\n","export function debounced(\n    task: Function,\n    duration: number = 250,\n    scope?: Object\n) {\n    let timer: number;\n\n    return function() {\n        function later(arg: any[]) {\n            clearTimeout(timer);\n            task.apply(scope, arg);\n        }\n\n        clearTimeout(timer);\n\n        //Array.from\n        timer = setTimeout(later, duration, Array.prototype.slice.call(arguments));\n    };\n}\n"],"names":["memo","React.memo","React.useCallback","React.useState","React.useRef","React.useReducer","React.useEffect","React.useMemo","subject","Array","isArray","el","scrollIntoView","behavior","smooth","block","id","onClick","className","record","children","props","role","$option","data","keyboard","itemRenderer","onSelect","ensureArray","selection","length","indexOf","firstSelectedIndex","idPrefx","useReducer","index","action","key","totalItems","_index","firstSelectedId","document","getElementById","focusIndex","map","item","ListBoxItem","liId","liClassName","selected","isSelected","OptionRenderer","style","expanded","useCallback","$listbox","tabIndex","ListBoxItems","handleSelect","win","window","addEventListener","removeEventListener","displayNone","display","innerHeight","top","bottom","height","getBoundingClientRect","viewportHeight","maxHeight","Object","assign","a","b","waiting","range","count","type","extend","state","comboboxReducer","nav","RegExp","query","filter","search","test","toString","expand","round","random","Math","prefix","useRef","queryMode","displayField","forceSelection","hideTrigger","disabled","readOnly","placeholder","onChange","onRemoteQuery","optionRenderer","displayRenderer","useMemo","listBoxItemContentFactory","initialState","state2","randomId","toggle","select","collapse","handleKeys","handleLocalSearch","setData","setWaiting","dispatch","deps","event","useComboboxActions","ref","current","useState","getPosition","calculate","busy","requestAnimationFrame","doCalculate","postion","usePickerPosition","comboboxRef","focus","inputRef","task","timer","apply","scope","arg","setTimeout","later","duration","prototype","slice","call","arguments","debounced","target","value","text","resolve","then","data2","$combobox","cls","aria-expanded","aria-owns","pickerId","aria-haspopup","aria-autocomplete","aria-controls","aria-activedescendant","onKeyDown","onInput","handleInput","aria-label","handleTriggerClick","ListBox","optionRendererMemo","pickerStyle"],"mappings":"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"}