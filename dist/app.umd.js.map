{"version":3,"file":"app.umd.js","sources":["../packages/utils/react.ts","../packages/combobox/listbox.tsx","../packages/utils/array.ts","../packages/utils/object.ts","../packages/combobox/combobox.store.ts","../packages/combobox/Combobox.tsx","../packages/hook/use-random-id.ts","../src/Application.tsx","../src/main.tsx"],"sourcesContent":["import * as React from 'react';\n\nexport default React;\nexport const memo = React.memo;\nexport const useCallback = React.useCallback;\nexport const useState = React.useState;\nexport const useRef = React.useRef;\nexport const useReducer = React.useReducer;\nexport const useEffect = React.useEffect;\n","import React, { memo } from '../utils/react'\nimport { ensureArray } from '../utils/array';\nimport { hasOwnProperty } from '../utils/object';\nimport {\n    listbox as $listbox,\n    option as $option,\n    focus as $focus,\n    selected as $selected,\n} from './listbox.module.css';\n\nexport interface ListBoxProps<T> {\n    className?: string;\n    id: string;\n    data?: T[];\n    displayField: string;\n    selected: T;\n    onSelect: (selection: T) => void;\n    focusIndex: number;\n    expanded: boolean;\n}\n\nfunction ListBox<T>(props: ListBoxProps<T>) {\n    const {\n        id,\n        className = '',\n        data,\n        displayField,\n        selected,\n        onSelect,\n        focusIndex,\n        expanded,\n    } = props;\n    return (\n        <ul id={id} role=\"listbox\" className={$listbox + ' ' + className}>\n            {expanded\n                ? ensureArray<T>(data).map((item, index) => (\n                      <li\n                          key={id + '-option-' + index}\n                          role=\"option\"\n                          id={id + '-option-' + index}\n                          className={\n                              $option +\n                              (focusIndex === index ? ' ' + $focus : '') +\n                              (selected === item ? ' ' + $selected : '')\n                          }\n                          onClick={() => onSelect(item)}>\n                          {hasOwnProperty(item, displayField)\n                              ? item[displayField]\n                              : null}\n                      </li>\n                  ))\n                : null}\n        </ul>\n    );\n}\n\nexport default memo(ListBox);\n","export function ensureArray<T = undefined>(subject?: T | T[] | null) {\n    if (subject == null) return [];\n    if (Array.isArray(subject)) return subject;\n    return [subject];\n}","export function hasOwnProperty(object: any, property: string): boolean {\n    return Object.prototype.hasOwnProperty.call(object, property);\n}","import { useCallback } from '../utils/react';\n\nconst assign = Object.assign;\nconst ACTION_TYPE_COLLAPSE = 0;\nconst ACTION_TYPE_EXPAND = 1;\nconst ACTION_TYPE_TOGGLE = 2;\nconst ACTION_TYPE_KEY_ARROW_DOWN = 3;\nconst ACTION_TYPE_KEY_ARROW_UP = 4;\nconst ACTION_TYPE_KEY_ENTER = 5;\nconst ACTION_TYPE_SELECT = 6;\nconst ACTION_TYPE_SET_DATA = 7;\n\nexport interface ComboboxState<T> {\n    id?: string;\n    expanded: boolean;\n    focusIndex: number;\n    selection: T;\n    data: T[];\n    range: T[];\n}\n\nexport interface ComboboxActionCollpase {\n    type: typeof ACTION_TYPE_COLLAPSE\n}\n\nexport interface ComboboxActionExpand {\n    type: typeof ACTION_TYPE_EXPAND;\n}\n\nexport interface ComboboxActionToggle {\n    type: typeof ACTION_TYPE_TOGGLE;\n}\n\nexport interface CompobobxActionArrowDown {\n    type: typeof ACTION_TYPE_KEY_ARROW_DOWN;\n}\n\nexport interface ComboboxActionArrowUp {\n    type: typeof ACTION_TYPE_KEY_ARROW_UP;\n}\n\nexport interface ComboboxActionEnter {\n    type: typeof ACTION_TYPE_KEY_ENTER;\n}\n\nexport interface ComboboxActionSelect<T> {\n    type: typeof ACTION_TYPE_SELECT,\n    selection: T\n}\n\nexport interface ComboboxActionSetData<T> {\n    type: typeof ACTION_TYPE_SET_DATA,\n    data: T[]\n}\n\nexport type ComboboxAction<T> = ComboboxActionCollpase | ComboboxActionExpand | ComboboxActionToggle | CompobobxActionArrowDown | ComboboxActionArrowUp | ComboboxActionEnter | ComboboxActionSelect<T> | ComboboxActionSetData<T>;\n\nexport const initialState = {\n    expanded: false,\n    focusIndex: -1,\n    selection: undefined,\n    data: [],\n    range: []\n}\n\nexport function comboboxReducer<T>(state: ComboboxState<T>, action: ComboboxAction<T>) {\n\n    switch (action.type) {\n        case ACTION_TYPE_COLLAPSE:\n            return assign({}, state, {\n                expanded: false,\n                focusIndex: -1\n            });\n\n        case ACTION_TYPE_EXPAND:\n            return assign({}, state, {\n                expanded: true\n            });\n\n        case ACTION_TYPE_TOGGLE:\n            return assign({}, state, {\n                expanded: !state.expanded\n            });\n\n        case ACTION_TYPE_KEY_ARROW_DOWN: {\n            let count = state.range.length;\n            return assign({}, state, {\n                expanded: true,\n                focusIndex: count === 0 ? -1 : (state.focusIndex + 1) % count\n            });\n        }\n\n        case ACTION_TYPE_KEY_ARROW_UP: {\n            let count = state.range.length;\n            let index = state.focusIndex === -1 ? count : state.focusIndex;\n            return assign({}, state, {\n                expanded: true,\n                focusIndex: count === 0 ? -1 : (count + index - 1) % count\n            });\n        }\n\n        case ACTION_TYPE_KEY_ENTER:\n            if (state.focusIndex !== -1) {\n                return assign({}, state, {\n                    expanded: false,\n                    selection: state.range[state.focusIndex]\n                })\n            }\n            break;\n\n        case ACTION_TYPE_SELECT:\n            return assign({}, state, {\n                expanded: false,\n                selection: action.selection\n            });\n\n        case ACTION_TYPE_SET_DATA: {\n            let data = action.data;\n            return assign({}, state, {\n                data,\n                range: data\n            });\n        }\n\n    }\n\n    return state;\n}\n\nexport function useComboboxActions<T>(dispatch: React.Dispatch<ComboboxAction<T>>) {\n\n    const expand = useCallback(function () {\n        dispatch({ type: ACTION_TYPE_EXPAND })\n    }, [dispatch])\n\n    const collapse = useCallback(function () {\n        dispatch({ type: ACTION_TYPE_COLLAPSE })\n    }, [dispatch]);\n\n    const toggle = useCallback(function () {\n        dispatch({ type: ACTION_TYPE_TOGGLE })\n    }, [dispatch])\n\n    const select = useCallback(function (selection: T) {\n        dispatch({\n            type: ACTION_TYPE_SELECT,\n            selection\n        })\n    }, [dispatch]);\n\n    const handleKeys = useCallback(\n        function (event: React.KeyboardEvent<HTMLInputElement>) {\n            switch (event.key) {\n                case 'ArrowDown': {\n                    dispatch({ type: ACTION_TYPE_KEY_ARROW_DOWN });\n                    break;\n                }\n                case 'ArrowUp': {\n                    dispatch({ type: ACTION_TYPE_KEY_ARROW_UP });\n                    break;\n                }\n                case 'Escape':\n                    collapse();\n                    break;\n                case 'Enter':\n                    dispatch({ type: ACTION_TYPE_KEY_ENTER });\n                    break;\n            }\n        },\n        [dispatch]\n    );\n\n    const handleInput = useCallback(function (event: React.FormEvent<HTMLInputElement>) {\n        const inputEl = event.target as HTMLInputElement;\n        const text = inputEl.value;\n    }, [dispatch]);\n\n    const setData = useCallback(function (data: T[]) {\n        dispatch({ type: ACTION_TYPE_SET_DATA, data })\n    }, [dispatch])\n\n    return { expand, collapse, toggle, select, handleKeys, handleInput, setData }\n}","import React, { useCallback, useRef, useReducer, useEffect } from '../utils/react';\nimport ListBox from './listbox';\nimport { useRandomId } from '../hook/use-random-id';\nimport {\n    comboboxReducer,\n    initialState,\n    useComboboxActions,\n} from './combobox.store';\nimport {\n    combobox as $combobox,\n    input_wrapper as $input_wrapper,\n    input as $input,\n    trigger as $trigger,\n} from './Combobox.module.scss';\n\nexport interface ComboboxProps<T> {\n    displayField: 'text';\n    valueField: 'text';\n    queryMode: 'local';\n    data: T[];\n    onChange?: (selection: T) => void;\n}\n\nexport function Combobox<T>(props: ComboboxProps<T>) {\n    const { data, displayField = 'text', onChange } = props;\n    const inputRef = useRef<HTMLInputElement>(null);\n    const id = useRandomId('combobox-');\n    const listboxId = id + '-listbox';\n    const [state, dispatch] = useReducer(comboboxReducer, initialState);\n    const { expanded, selection, range, focusIndex } = state;\n    const {\n        expand,\n        collapse,\n        toggle,\n        select,\n        handleKeys,\n        handleInput,\n        setData,\n    } = useComboboxActions(dispatch);\n\n    const handleTriggerClick = useCallback(\n        function () {\n            let el = inputRef.current;\n            if (el) {\n                el.focus();\n            }\n            toggle();\n        },\n        [inputRef]\n    );\n\n    useEffect(() => {\n        setData(data);\n    }, [data]);\n\n    useEffect(() => {\n        if(selection && inputRef.current){\n            inputRef.current.value = selection[displayField];\n        }\n    }, [selection, displayField, inputRef]);\n\n    return (\n        <div className={$combobox}>\n            <div\n                className={$input_wrapper}\n                role=\"combobox\"\n                aria-expanded={expanded ? 'true' : 'false'}\n                aria-owns={listboxId}\n                aria-haspopup=\"listbox\">\n                <input\n                    type=\"text\"\n                    aria-autocomplete=\"both\"\n                    aria-controls={listboxId}\n                    aria-activedescendant={\n                        focusIndex === -1 ? '' : id + '-option-' + focusIndex\n                    }\n                    onKeyDown={handleKeys}\n                    onInput={handleInput}\n                    className={$input}\n                    ref={inputRef}\n                />\n                <div\n                    className={$trigger}\n                    tabIndex={-1}\n                    role=\"button\"\n                    aria-label=\"Show options\"\n                    onClick={handleTriggerClick}>\n                    ▼\n                </div>\n            </div>\n            <ListBox\n                id={listboxId}\n                data={range}\n                displayField={displayField}\n                focusIndex={focusIndex}\n                expanded={expanded}\n                onSelect={select}\n                selected={selection}\n            />\n        </div>\n    );\n}\n","import { useState } from \"../utils/react\";\n\nexport function useRandomId(prefix = \"\") {\n    const id = useState(() => prefix + Math.round(Math.random() + Math.random() * 10e16).toString(32));\n    return id[0];\n}","import React from 'react';\nimport Combobox from '../packages/combobox';\n\nconst veggies = [\n    {\n        text: 'Apple',\n        value: 'apple',\n    },\n    {\n        text: 'Orange',\n        value: 'orange',\n    },\n    {\n        text: 'Banana',\n        value: 'banana',\n    },\n];\n\nexport function Application() {\n    return <Combobox label=\"Fruit or Vegtable\" value=\"123\" data={veggies} />;\n}\n","import * as ReactDOM from 'react-dom';\nimport React from 'react';\nimport { Application } from './Application';\n\nfunction render(container: HTMLDivElement) {\n    ReactDOM.render(<Application />, container);\n}\n\nfunction unmount(container: HTMLDivElement) {\n    ReactDOM.unmountComponentAtNode(container);\n}\n\nexport default {\n    render,\n    unmount,\n};\n"],"names":["memo","React.memo","useCallback","React.useCallback","useState","React.useState","useRef","React.useRef","useReducer","React.useReducer","useEffect","React.useEffect","props","id","className","data","displayField","selected","onSelect","focusIndex","expanded","role","$listbox","subject","Array","isArray","map","item","index","key","onClick","object","property","Object","prototype","hasOwnProperty","call","assign","initialState","selection","range","state","action","type","count","length","onChange","inputRef","prefix","Math","round","random","toString","useRandomId","listboxId","dispatch","comboboxReducer","expand","collapse","toggle","select","handleKeys","handleInput","setData","event","target","value","useComboboxActions","handleTriggerClick","el","current","focus","aria-expanded","aria-owns","aria-haspopup","aria-autocomplete","aria-controls","aria-activedescendant","onKeyDown","onInput","ref","tabIndex","aria-label","ListBox","veggies","text","Combobox","label","render","container","Application2","unmount"],"mappings":"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"}