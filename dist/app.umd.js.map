{"version":3,"file":"app.umd.js","sources":["../packages/utils/react.ts","../packages/utils/array.ts","../packages/utils/object.ts","../packages/combobox/listbox.tsx","../packages/hook/use-random-id.ts","../packages/combobox/combobox.store.ts","../packages/combobox/Combobox.tsx","../src/Application.tsx","../src/main.tsx"],"sourcesContent":["import * as React from 'react';\n\nexport default React;\nexport const memo = React.memo;\nexport const useCallback = React.useCallback;\nexport const useState = React.useState;\nexport const useRef = React.useRef;\nexport const useReducer = React.useReducer;\nexport const useEffect = React.useEffect;\n","export function ensureArray<T = undefined>(subject?: T | T[] | null) {\n    if (subject == null) return [];\n    if (Array.isArray(subject)) return subject;\n    return [subject];\n}","export function hasOwnProperty(object: any, property: string): boolean {\n    return Object.prototype.hasOwnProperty.call(object, property);\n}","import React, { memo } from '../utils/react';\nimport { ensureArray } from '../utils/array';\nimport { hasOwnProperty } from '../utils/object';\nimport { Json } from './combobox.store';\nimport {\n    listbox as $listbox,\n    option as $option,\n    focus as $focus,\n    selected as $selected,\n} from './listbox.module.css';\n\nexport interface ListBoxProps<T> {\n    className?: string;\n    id: string;\n    data?: T[];\n    displayField?: string;\n    selected?: T;\n    onSelect: (selection: T) => void;\n    focusIndex: number;\n    expanded: boolean;\n    optionRenderer?: (record: T) => JSX.Element | string;\n}\n\nfunction ListBox(props: ListBoxProps<Json>) {\n    const {\n        id,\n        className = '',\n        data,\n        displayField,\n        selected,\n        onSelect,\n        focusIndex,\n        expanded,\n        optionRenderer,\n    } = props;\n    return (\n        <ul id={id} role=\"listbox\" className={$listbox + ' ' + className}>\n            {expanded\n                ? ensureArray<T>(data).map((item, index) => (\n                      <li\n                          key={id + '-option-' + index}\n                          role=\"option\"\n                          id={id + '-option-' + index}\n                          className={\n                              $option +\n                              (focusIndex === index ? ' ' + $focus : '') +\n                              (selected === item ? ' ' + $selected : '')\n                          }\n                          onClick={() => onSelect(item)}>\n                          {typeof optionRenderer === 'function'\n                              ? optionRenderer(item)\n                              : hasOwnProperty(item, displayField)\n                              ? item[displayField]\n                              : null}\n                      </li>\n                  ))\n                : null}\n        </ul>\n    );\n}\n\nexport default memo(ListBox);\n","import { useState } from \"../utils/react\";\n\nexport function useRandomId(prefix = \"\") {\n    const id = useState(() => prefix + Math.round(Math.random() + Math.random() * 10e16).toString(32));\n    return id[0];\n}","import { useCallback } from '../utils/react';\n\nconst assign = Object.assign;\nconst ACTION_TYPE_COLLAPSE = 0;\nconst ACTION_TYPE_EXPAND = 1;\nconst ACTION_TYPE_TOGGLE = 2;\nconst ACTION_TYPE_KEY_ARROW_DOWN = 3;\nconst ACTION_TYPE_KEY_ARROW_UP = 4;\nconst ACTION_TYPE_KEY_ENTER = 5;\nconst ACTION_TYPE_SELECT = 6;\nconst ACTION_TYPE_SET_DATA = 7;\nconst ACTION_TYPE_SEARCH = 8;\n\n// not actual definition of JSON (null and Array not used)\nexport type Json = { [prop: string]: string | number | boolean | Date }\n\nexport interface ComboboxState<T> {\n    displayField: string;\n    expanded: boolean;\n    focusIndex: number;\n    selection?: T;\n    data: T[];\n    range: T[];\n}\n\nexport interface ComboboxActionCollpase {\n    type: typeof ACTION_TYPE_COLLAPSE\n}\n\nexport interface ComboboxActionExpand {\n    type: typeof ACTION_TYPE_EXPAND;\n}\n\nexport interface ComboboxActionToggle {\n    type: typeof ACTION_TYPE_TOGGLE;\n}\n\nexport interface CompobobxActionArrowDown {\n    type: typeof ACTION_TYPE_KEY_ARROW_DOWN;\n}\n\nexport interface ComboboxActionArrowUp {\n    type: typeof ACTION_TYPE_KEY_ARROW_UP;\n}\n\nexport interface ComboboxActionEnter {\n    type: typeof ACTION_TYPE_KEY_ENTER;\n}\n\nexport interface ComboboxActionSelect<T> {\n    type: typeof ACTION_TYPE_SELECT,\n    selection: T\n}\n\nexport interface ComboboxActionSetData<T> {\n    type: typeof ACTION_TYPE_SET_DATA,\n    data: T[]\n}\n\nexport interface ComboboxActionSearch {\n    type: typeof ACTION_TYPE_SEARCH,\n    query: string;\n}\n\nexport type ComboboxAction<T> = ComboboxActionCollpase | ComboboxActionExpand | ComboboxActionToggle | CompobobxActionArrowDown | ComboboxActionArrowUp | ComboboxActionEnter | ComboboxActionSelect<T> | ComboboxActionSetData<T> | ComboboxActionSearch;\n\nexport const initialState = {\n    displayField: '',\n    expanded: false,\n    focusIndex: -1,\n    selection: undefined,\n    data: [],\n    range: []\n}\n\nexport function comboboxReducer(state: ComboboxState<Json>, action: ComboboxAction<Json>) {\n\n    switch (action.type) {\n        case ACTION_TYPE_COLLAPSE:\n            return assign({}, state, {\n                expanded: false,\n                focusIndex: -1\n            });\n\n        case ACTION_TYPE_EXPAND:\n            return assign({}, state, {\n                expanded: true\n            });\n\n        case ACTION_TYPE_TOGGLE:\n            return assign({}, state, {\n                expanded: !state.expanded\n            });\n\n        case ACTION_TYPE_KEY_ARROW_DOWN: {\n            let count = state.range.length;\n            return assign({}, state, {\n                expanded: true,\n                focusIndex: count === 0 ? -1 : (state.focusIndex + 1) % count\n            });\n        }\n\n        case ACTION_TYPE_KEY_ARROW_UP: {\n            let count = state.range.length;\n            let index = state.focusIndex === -1 ? count : state.focusIndex;\n            return assign({}, state, {\n                expanded: true,\n                focusIndex: count === 0 ? -1 : (count + index - 1) % count\n            });\n        }\n\n        case ACTION_TYPE_KEY_ENTER:\n            if (state.focusIndex !== -1) {\n                return assign({}, state, {\n                    expanded: false,\n                    selection: state.range[state.focusIndex]\n                })\n            }\n            break;\n\n        case ACTION_TYPE_SELECT:\n            return assign({}, state, {\n                expanded: false,\n                selection: action.selection\n            });\n\n        case ACTION_TYPE_SET_DATA: {\n            let data = action.data;\n            return assign({}, state, {\n                data,\n                range: data\n            });\n        }\n\n        case ACTION_TYPE_SEARCH: {\n            const search = new RegExp(action.query, 'i');\n            return assign({}, state, {\n                expanded: true,\n                range: state.data.filter(record => search.test(record[state.displayField].toString()))\n            })\n        }\n\n\n    }\n\n    return state;\n}\n\nexport function useComboboxActions<Json>(dispatch: React.Dispatch<ComboboxAction<Json>>) {\n\n    const expand = useCallback(function () {\n        dispatch({ type: ACTION_TYPE_EXPAND })\n    }, [dispatch])\n\n    const collapse = useCallback(function () {\n        dispatch({ type: ACTION_TYPE_COLLAPSE })\n    }, [dispatch]);\n\n    const toggle = useCallback(function () {\n        dispatch({ type: ACTION_TYPE_TOGGLE })\n    }, [dispatch])\n\n    const select = useCallback(function (selection: Json) {\n        dispatch({\n            type: ACTION_TYPE_SELECT,\n            selection\n        })\n    }, [dispatch]);\n\n    const handleKeys = useCallback(\n        function (event: React.KeyboardEvent<HTMLInputElement>) {\n            switch (event.key) {\n                case 'ArrowDown': {\n                    dispatch({ type: ACTION_TYPE_KEY_ARROW_DOWN });\n                    break;\n                }\n                case 'ArrowUp': {\n                    dispatch({ type: ACTION_TYPE_KEY_ARROW_UP });\n                    break;\n                }\n                case 'Escape':\n                    collapse();\n                    break;\n                case 'Enter':\n                    dispatch({ type: ACTION_TYPE_KEY_ENTER });\n                    break;\n            }\n        },\n        [dispatch]\n    );\n\n    const handleInput = useCallback(function (event: React.FormEvent<HTMLInputElement>) {\n        const inputEl = event.target as HTMLInputElement;\n        dispatch({\n            type: ACTION_TYPE_SEARCH,\n            query: inputEl.value\n        })\n    }, [dispatch]);\n\n    const setData = useCallback(function (data: Json[]) {\n        dispatch({ type: ACTION_TYPE_SET_DATA, data })\n    }, [dispatch])\n\n    return { expand, collapse, toggle, select, handleKeys, handleInput, setData }\n}","import React, {\n    useCallback,\n    useRef,\n    useReducer,\n    useEffect,\n} from '../utils/react';\nimport ListBox from './listbox';\nimport { useRandomId } from '../hook/use-random-id';\nimport {\n    comboboxReducer,\n    initialState,\n    useComboboxActions,\n    Json,\n} from './combobox.store';\nimport {\n    combobox as $combobox,\n    input_wrapper as $input_wrapper,\n    input as $input,\n    trigger as $trigger,\n} from './Combobox.module.scss';\n\nexport interface ComboboxProps<T> {\n    displayField: 'text';\n    valueField: 'text';\n    queryMode: 'local';\n    data: T[];\n    onChange?: (selection: T) => void;\n    optionRenderer?: (record: T) => JSX.Element | string;\n    displayRenderer?: (record: T) => JSX.Element | string;\n    query?: (search: string) => T[];\n}\n\nexport function Combobox(props: ComboboxProps<Json>) {\n    const {\n        data,\n        displayField = 'text',\n        onChange,\n        optionRenderer,\n        displayRenderer,\n    } = props;\n    const inputRef = useRef<HTMLInputElement>(null);\n    const id = useRandomId('combobox-');\n    const listboxId = id + '-listbox';\n    const [state, dispatch] = useReducer(\n        comboboxReducer,\n        initialState,\n        (state) => Object.assign({}, state, { displayField })\n    );\n    const { expanded, selection, range, focusIndex } = state;\n    const {\n        toggle,\n        select,\n        handleKeys,\n        handleInput,\n        setData,\n    } = useComboboxActions(dispatch);\n\n    const handleTriggerClick = useCallback(\n        function () {\n            let el = inputRef.current;\n            if (el) {\n                el.focus();\n            }\n            toggle();\n        },\n        [inputRef]\n    );\n\n    useEffect(() => {\n        setData(data);\n    }, [data]);\n\n    useEffect(() => {\n        if (selection && inputRef.current) {\n            inputRef.current.value =\n                typeof displayRenderer === 'function'\n                    ? displayRenderer(selection).toString()\n                    : selection[displayField].toString();\n        }\n    }, [selection, displayField, inputRef, displayRenderer]);\n\n    return (\n        <div className={$combobox}>\n            <div\n                className={$input_wrapper}\n                role=\"combobox\"\n                aria-expanded={expanded ? 'true' : 'false'}\n                aria-owns={listboxId}\n                aria-haspopup=\"listbox\">\n                <input\n                    type=\"text\"\n                    aria-autocomplete=\"both\"\n                    aria-controls={listboxId}\n                    aria-activedescendant={\n                        focusIndex === -1 ? '' : id + '-option-' + focusIndex\n                    }\n                    onKeyDown={handleKeys}\n                    onInput={handleInput}\n                    className={$input}\n                    ref={inputRef}\n                />\n                <div\n                    className={$trigger}\n                    tabIndex={-1}\n                    role=\"button\"\n                    aria-label=\"Show options\"\n                    onClick={handleTriggerClick}>\n                    ▼\n                </div>\n            </div>\n            <ListBox\n                id={listboxId}\n                data={range}\n                displayField={displayField}\n                focusIndex={focusIndex}\n                expanded={expanded}\n                onSelect={select}\n                selected={selection}\n                optionRenderer={optionRenderer}\n            />\n        </div>\n    );\n}\n","import React from 'react';\nimport Combobox from '../packages/combobox';\n\nconst veggies = [\n    {\n        text: 'Apple',\n        value: 'apple',\n    },\n    {\n        text: 'Orange',\n        value: 'orange',\n    },\n    {\n        text: 'Banana',\n        value: 'banana',\n    },\n];\n\nexport function Application() {\n    return (\n        <Combobox\n            value=\"123\"\n            data={veggies}\n            optionRenderer={(record) => 'Fruit ' + record.text}\n            displayRenderer={record => 'aaa' + record.value}\n            query={(query:string)=> {}}\n        />\n    );\n}\n","import * as ReactDOM from 'react-dom';\nimport React from 'react';\nimport { Application } from './Application';\n\nfunction render(container: HTMLDivElement) {\n    ReactDOM.render(<Application />, container);\n}\n\nfunction unmount(container: HTMLDivElement) {\n    ReactDOM.unmountComponentAtNode(container);\n}\n\nexport default {\n    render,\n    unmount,\n};\n"],"names":["React.memo","React.useCallback","React.useState","React.useRef","React.useReducer","React.useEffect","selected","$listbox","$option","$focus","$selected","$combobox","$input_wrapper","$input","$trigger","ListBox","Application2"],"mappings":"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"}